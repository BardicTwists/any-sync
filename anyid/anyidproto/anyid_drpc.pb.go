// Code generated by protoc-gen-go-drpc. DO NOT EDIT.
// protoc-gen-go-drpc version: v0.0.33
// source: anyid/anyidproto/protos/anyid.proto

package anyidproto

import (
	bytes "bytes"
	context "context"
	errors "errors"
	jsonpb "github.com/gogo/protobuf/jsonpb"
	proto "github.com/gogo/protobuf/proto"
	drpc "storj.io/drpc"
	drpcerr "storj.io/drpc/drpcerr"
)

type drpcEncoding_File_anyid_anyidproto_protos_anyid_proto struct{}

func (drpcEncoding_File_anyid_anyidproto_protos_anyid_proto) Marshal(msg drpc.Message) ([]byte, error) {
	return proto.Marshal(msg.(proto.Message))
}

func (drpcEncoding_File_anyid_anyidproto_protos_anyid_proto) Unmarshal(buf []byte, msg drpc.Message) error {
	return proto.Unmarshal(buf, msg.(proto.Message))
}

func (drpcEncoding_File_anyid_anyidproto_protos_anyid_proto) JSONMarshal(msg drpc.Message) ([]byte, error) {
	var buf bytes.Buffer
	err := new(jsonpb.Marshaler).Marshal(&buf, msg.(proto.Message))
	if err != nil {
		return nil, err
	}
	return buf.Bytes(), nil
}

func (drpcEncoding_File_anyid_anyidproto_protos_anyid_proto) JSONUnmarshal(buf []byte, msg drpc.Message) error {
	return jsonpb.Unmarshal(bytes.NewReader(buf), msg.(proto.Message))
}

type DRPCAnyIdClient interface {
	DRPCConn() drpc.Conn

	DataPut(ctx context.Context, in *DataPutRequest) (*Ok, error)
	DataDelete(ctx context.Context, in *DataDeleteRequest) (*Ok, error)
	DataPull(ctx context.Context, in *DataPullRequest) (*DataPullResponse, error)
}

type drpcAnyIdClient struct {
	cc drpc.Conn
}

func NewDRPCAnyIdClient(cc drpc.Conn) DRPCAnyIdClient {
	return &drpcAnyIdClient{cc}
}

func (c *drpcAnyIdClient) DRPCConn() drpc.Conn { return c.cc }

func (c *drpcAnyIdClient) DataPut(ctx context.Context, in *DataPutRequest) (*Ok, error) {
	out := new(Ok)
	err := c.cc.Invoke(ctx, "/anyid.AnyId/DataPut", drpcEncoding_File_anyid_anyidproto_protos_anyid_proto{}, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *drpcAnyIdClient) DataDelete(ctx context.Context, in *DataDeleteRequest) (*Ok, error) {
	out := new(Ok)
	err := c.cc.Invoke(ctx, "/anyid.AnyId/DataDelete", drpcEncoding_File_anyid_anyidproto_protos_anyid_proto{}, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *drpcAnyIdClient) DataPull(ctx context.Context, in *DataPullRequest) (*DataPullResponse, error) {
	out := new(DataPullResponse)
	err := c.cc.Invoke(ctx, "/anyid.AnyId/DataPull", drpcEncoding_File_anyid_anyidproto_protos_anyid_proto{}, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

type DRPCAnyIdServer interface {
	DataPut(context.Context, *DataPutRequest) (*Ok, error)
	DataDelete(context.Context, *DataDeleteRequest) (*Ok, error)
	DataPull(context.Context, *DataPullRequest) (*DataPullResponse, error)
}

type DRPCAnyIdUnimplementedServer struct{}

func (s *DRPCAnyIdUnimplementedServer) DataPut(context.Context, *DataPutRequest) (*Ok, error) {
	return nil, drpcerr.WithCode(errors.New("Unimplemented"), drpcerr.Unimplemented)
}

func (s *DRPCAnyIdUnimplementedServer) DataDelete(context.Context, *DataDeleteRequest) (*Ok, error) {
	return nil, drpcerr.WithCode(errors.New("Unimplemented"), drpcerr.Unimplemented)
}

func (s *DRPCAnyIdUnimplementedServer) DataPull(context.Context, *DataPullRequest) (*DataPullResponse, error) {
	return nil, drpcerr.WithCode(errors.New("Unimplemented"), drpcerr.Unimplemented)
}

type DRPCAnyIdDescription struct{}

func (DRPCAnyIdDescription) NumMethods() int { return 3 }

func (DRPCAnyIdDescription) Method(n int) (string, drpc.Encoding, drpc.Receiver, interface{}, bool) {
	switch n {
	case 0:
		return "/anyid.AnyId/DataPut", drpcEncoding_File_anyid_anyidproto_protos_anyid_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return srv.(DRPCAnyIdServer).
					DataPut(
						ctx,
						in1.(*DataPutRequest),
					)
			}, DRPCAnyIdServer.DataPut, true
	case 1:
		return "/anyid.AnyId/DataDelete", drpcEncoding_File_anyid_anyidproto_protos_anyid_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return srv.(DRPCAnyIdServer).
					DataDelete(
						ctx,
						in1.(*DataDeleteRequest),
					)
			}, DRPCAnyIdServer.DataDelete, true
	case 2:
		return "/anyid.AnyId/DataPull", drpcEncoding_File_anyid_anyidproto_protos_anyid_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return srv.(DRPCAnyIdServer).
					DataPull(
						ctx,
						in1.(*DataPullRequest),
					)
			}, DRPCAnyIdServer.DataPull, true
	default:
		return "", nil, nil, nil, false
	}
}

func DRPCRegisterAnyId(mux drpc.Mux, impl DRPCAnyIdServer) error {
	return mux.Register(impl, DRPCAnyIdDescription{})
}

type DRPCAnyId_DataPutStream interface {
	drpc.Stream
	SendAndClose(*Ok) error
}

type drpcAnyId_DataPutStream struct {
	drpc.Stream
}

func (x *drpcAnyId_DataPutStream) SendAndClose(m *Ok) error {
	if err := x.MsgSend(m, drpcEncoding_File_anyid_anyidproto_protos_anyid_proto{}); err != nil {
		return err
	}
	return x.CloseSend()
}

type DRPCAnyId_DataDeleteStream interface {
	drpc.Stream
	SendAndClose(*Ok) error
}

type drpcAnyId_DataDeleteStream struct {
	drpc.Stream
}

func (x *drpcAnyId_DataDeleteStream) SendAndClose(m *Ok) error {
	if err := x.MsgSend(m, drpcEncoding_File_anyid_anyidproto_protos_anyid_proto{}); err != nil {
		return err
	}
	return x.CloseSend()
}

type DRPCAnyId_DataPullStream interface {
	drpc.Stream
	SendAndClose(*DataPullResponse) error
}

type drpcAnyId_DataPullStream struct {
	drpc.Stream
}

func (x *drpcAnyId_DataPullStream) SendAndClose(m *DataPullResponse) error {
	if err := x.MsgSend(m, drpcEncoding_File_anyid_anyidproto_protos_anyid_proto{}); err != nil {
		return err
	}
	return x.CloseSend()
}
