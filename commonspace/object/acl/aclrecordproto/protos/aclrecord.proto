syntax = "proto3";
package aclrecord;
option go_package = "commonspace/object/acl/aclrecordproto";

// RawAclRecord is a proto message containing the acl payload in bytes, signature of the account who added it and signature of the acceptor
message RawAclRecord {
    bytes payload = 1;
    bytes signature = 2;
    bytes acceptorIdentity = 3;
    bytes acceptorSignature = 4;
}

// RawAclRecordWithId is a raw record and the id for convenience
message RawAclRecordWithId {
    bytes payload = 1;
    string id = 2;
}

// AclRecord is a record containing the acl data
message AclRecord {
    string prevId = 1;
    bytes identity = 2;
    bytes data = 3;
    int64 timestamp = 4;
}

// AclRoot is a root of access control list
message AclRoot {
    bytes identity = 1;
    bytes masterKey = 2;
    string spaceId = 3;
    bytes encryptedReadKey = 4;
    int64 timestamp = 5;
    bytes identitySignature = 6;
}

// AclAccountInvite contains the public invite key, the private part of which is sent to the user directly
message AclAccountInvite {
    bytes inviteKey = 1;
}

// AclAccountRequestJoin contains the reference to the invite record and the data of the person who wants to join, confirmed by the private invite key
message AclAccountRequestJoin {
    bytes inviteIdentity = 1;
    string inviteRecordId = 2;
    bytes inviteIdentitySignature = 3;
    bytes metadata = 4;
}

// AclAccountRequestAccept contains the reference to join record and all read keys, encrypted with the identity of the requestor
message AclAccountRequestAccept {
    bytes identity = 1;
    string requestRecordId = 2;
    repeated AclReadKeyWithRecord encryptedReadKeys = 3;
    AclUserPermissions permissions = 4;
}

// AclAccountRequestDecline contains the reference to join record
message AclAccountRequestDecline {
    string requestRecordId = 1;
}

// AclAccountInviteRevoke revokes the invite record
message AclAccountInviteRevoke {
    string inviteRecordId = 1;
}

// AclReadKeys are a read key with record id
message AclReadKeyWithRecord {
    string recordId = 1;
    bytes encryptedReadKey = 2;
}

// AclEncryptedReadKeys are new key for specific identity
message AclEncryptedReadKey {
    bytes identity = 1;
    bytes encryptedReadKey = 2;
}

// AclAccountPermissionChange changes permissions of specific account
message AclAccountPermissionChange {
    bytes identity = 1;
    AclUserPermissions permissions = 2;
}

// AclReadKeyChange changes the key for a space
message AclReadKeyChange {
    repeated AclEncryptedReadKey accountKeys = 1;
}

// AclAccountRemove removes an account and changes read key for space
message AclAccountRemove {
    bytes identity = 1;
    repeated AclEncryptedReadKey accountKeys = 2;
}

// AclContentValue contains possible values for Acl
message AclContentValue {
    oneof value {
        AclAccountInvite invite = 1;
        AclAccountInviteRevoke inviteRevoke = 2;
        AclAccountRequestJoin requestJoin = 3;
        AclAccountRequestAccept requestAccept = 4;
        AclAccountPermissionChange permissionChange = 5;
        AclAccountRemove accountRemove = 6;
        AclReadKeyChange readKeyChange = 7;
        AclAccountRequestDecline requestDecline = 8;
    }
}

// AclData contains different acl content
message AclData {
    repeated AclContentValue aclContent = 1;
}

// AclUserPermissions contains different possible user roles
enum AclUserPermissions {
    None = 0;
    Owner = 1;
    Admin = 2;
    Writer = 3;
    Reader = 4;
}

message AclSyncMessage {
    AclSyncContentValue content = 1;
}

// AclSyncContentValue provides different types for acl sync
message AclSyncContentValue {
    oneof value {
        AclAddRecords addRecords = 1;
    }
}

message AclAddRecords {
    repeated RawAclRecordWithId records = 1;
}