// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: nameservice/nameserviceproto/protos/nameservice_aa.proto

package nameserviceproto

import (
	fmt "fmt"
	proto "github.com/anyproto/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type OperationState int32

const (
	OperationState_Unknown           OperationState = 0
	OperationState_Pending           OperationState = 1
	OperationState_PendingOrNotFound OperationState = 2
	OperationState_Completed         OperationState = 3
	OperationState_Error             OperationState = 4
)

var OperationState_name = map[int32]string{
	0: "Unknown",
	1: "Pending",
	2: "PendingOrNotFound",
	3: "Completed",
	4: "Error",
}

var OperationState_value = map[string]int32{
	"Unknown":           0,
	"Pending":           1,
	"PendingOrNotFound": 2,
	"Completed":         3,
	"Error":             4,
}

func (x OperationState) String() string {
	return proto.EnumName(OperationState_name, int32(x))
}

func (OperationState) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_c9d3f9b8b141e804, []int{0}
}

type UserAccount struct {
	// An Ethereum address that owns that account
	OwnerEthAddress string `protobuf:"bytes,1,opt,name=ownerEthAddress,proto3" json:"ownerEthAddress,omitempty"`
	// This smart contract really controls all names
	// you can ask .owner() method to get 'ownerEthAddress'
	OwnerSmartContracWalletAddress string `protobuf:"bytes,2,opt,name=ownerSmartContracWalletAddress,proto3" json:"ownerSmartContracWalletAddress,omitempty"`
	// The ownerSmartContracWalletAddress field is calculated automatically
	// from ownerEthAddress even if SCW is not deployed yet
	// SCW is deployed automatically after first operation
	OwnerSmartContracWalletDeployed bool `protobuf:"varint,3,opt,name=ownerSmartContracWalletDeployed,proto3" json:"ownerSmartContracWalletDeployed,omitempty"`
	// Number of names that the user can buy. We will mint him tokens that he can use to buy names
	// (one token per name)
	NamesCountLeft uint64 `protobuf:"varint,4,opt,name=namesCountLeft,proto3" json:"namesCountLeft,omitempty"`
	// Number of gas operations: update name, add new data, etc
	OperationsCountLeft uint64 `protobuf:"varint,5,opt,name=operationsCountLeft,proto3" json:"operationsCountLeft,omitempty"`
}

func (m *UserAccount) Reset()         { *m = UserAccount{} }
func (m *UserAccount) String() string { return proto.CompactTextString(m) }
func (*UserAccount) ProtoMessage()    {}
func (*UserAccount) Descriptor() ([]byte, []int) {
	return fileDescriptor_c9d3f9b8b141e804, []int{0}
}
func (m *UserAccount) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UserAccount) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UserAccount.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UserAccount) XXX_MarshalAppend(b []byte, newLen int) ([]byte, error) {
	b = b[:newLen]
	_, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b, nil
}
func (m *UserAccount) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserAccount.Merge(m, src)
}
func (m *UserAccount) XXX_Size() int {
	return m.Size()
}
func (m *UserAccount) XXX_DiscardUnknown() {
	xxx_messageInfo_UserAccount.DiscardUnknown(m)
}

var xxx_messageInfo_UserAccount proto.InternalMessageInfo

func (m *UserAccount) GetOwnerEthAddress() string {
	if m != nil {
		return m.OwnerEthAddress
	}
	return ""
}

func (m *UserAccount) GetOwnerSmartContracWalletAddress() string {
	if m != nil {
		return m.OwnerSmartContracWalletAddress
	}
	return ""
}

func (m *UserAccount) GetOwnerSmartContracWalletDeployed() bool {
	if m != nil {
		return m.OwnerSmartContracWalletDeployed
	}
	return false
}

func (m *UserAccount) GetNamesCountLeft() uint64 {
	if m != nil {
		return m.NamesCountLeft
	}
	return 0
}

func (m *UserAccount) GetOperationsCountLeft() uint64 {
	if m != nil {
		return m.OperationsCountLeft
	}
	return 0
}

type AdminFundUserAccountRequest struct {
	// An Ethereum address that owns that name
	OwnerEthAddress string `protobuf:"bytes,1,opt,name=ownerEthAddress,proto3" json:"ownerEthAddress,omitempty"`
	// Number of names that user can buy. We will mint him tokens that he can use to buy names
	// (one token per name)
	NamesCount uint64 `protobuf:"varint,2,opt,name=namesCount,proto3" json:"namesCount,omitempty"`
}

func (m *AdminFundUserAccountRequest) Reset()         { *m = AdminFundUserAccountRequest{} }
func (m *AdminFundUserAccountRequest) String() string { return proto.CompactTextString(m) }
func (*AdminFundUserAccountRequest) ProtoMessage()    {}
func (*AdminFundUserAccountRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c9d3f9b8b141e804, []int{1}
}
func (m *AdminFundUserAccountRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AdminFundUserAccountRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AdminFundUserAccountRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AdminFundUserAccountRequest) XXX_MarshalAppend(b []byte, newLen int) ([]byte, error) {
	b = b[:newLen]
	_, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b, nil
}
func (m *AdminFundUserAccountRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AdminFundUserAccountRequest.Merge(m, src)
}
func (m *AdminFundUserAccountRequest) XXX_Size() int {
	return m.Size()
}
func (m *AdminFundUserAccountRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AdminFundUserAccountRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AdminFundUserAccountRequest proto.InternalMessageInfo

func (m *AdminFundUserAccountRequest) GetOwnerEthAddress() string {
	if m != nil {
		return m.OwnerEthAddress
	}
	return ""
}

func (m *AdminFundUserAccountRequest) GetNamesCount() uint64 {
	if m != nil {
		return m.NamesCount
	}
	return 0
}

type AdminFundUserAccountRequestSigned struct {
	// AdminFundUserAccountRequest struct
	Payload []byte `protobuf:"bytes,1,opt,name=payload,proto3" json:"payload,omitempty"`
	// payload signed by Admin of this service
	Signature []byte `protobuf:"bytes,2,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (m *AdminFundUserAccountRequestSigned) Reset()         { *m = AdminFundUserAccountRequestSigned{} }
func (m *AdminFundUserAccountRequestSigned) String() string { return proto.CompactTextString(m) }
func (*AdminFundUserAccountRequestSigned) ProtoMessage()    {}
func (*AdminFundUserAccountRequestSigned) Descriptor() ([]byte, []int) {
	return fileDescriptor_c9d3f9b8b141e804, []int{2}
}
func (m *AdminFundUserAccountRequestSigned) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AdminFundUserAccountRequestSigned) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AdminFundUserAccountRequestSigned.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AdminFundUserAccountRequestSigned) XXX_MarshalAppend(b []byte, newLen int) ([]byte, error) {
	b = b[:newLen]
	_, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b, nil
}
func (m *AdminFundUserAccountRequestSigned) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AdminFundUserAccountRequestSigned.Merge(m, src)
}
func (m *AdminFundUserAccountRequestSigned) XXX_Size() int {
	return m.Size()
}
func (m *AdminFundUserAccountRequestSigned) XXX_DiscardUnknown() {
	xxx_messageInfo_AdminFundUserAccountRequestSigned.DiscardUnknown(m)
}

var xxx_messageInfo_AdminFundUserAccountRequestSigned proto.InternalMessageInfo

func (m *AdminFundUserAccountRequestSigned) GetPayload() []byte {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (m *AdminFundUserAccountRequestSigned) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

type AdminFundGasOperationsRequest struct {
	// An Ethereum address that owns that name
	OwnerEthAddress string `protobuf:"bytes,1,opt,name=ownerEthAddress,proto3" json:"ownerEthAddress,omitempty"`
	OwnerAnyID      string `protobuf:"bytes,2,opt,name=ownerAnyID,proto3" json:"ownerAnyID,omitempty"`
	// Number of gas operations: update name, add new data, etc
	OperationsCount uint64 `protobuf:"varint,3,opt,name=operationsCount,proto3" json:"operationsCount,omitempty"`
}

func (m *AdminFundGasOperationsRequest) Reset()         { *m = AdminFundGasOperationsRequest{} }
func (m *AdminFundGasOperationsRequest) String() string { return proto.CompactTextString(m) }
func (*AdminFundGasOperationsRequest) ProtoMessage()    {}
func (*AdminFundGasOperationsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c9d3f9b8b141e804, []int{3}
}
func (m *AdminFundGasOperationsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AdminFundGasOperationsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AdminFundGasOperationsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AdminFundGasOperationsRequest) XXX_MarshalAppend(b []byte, newLen int) ([]byte, error) {
	b = b[:newLen]
	_, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b, nil
}
func (m *AdminFundGasOperationsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AdminFundGasOperationsRequest.Merge(m, src)
}
func (m *AdminFundGasOperationsRequest) XXX_Size() int {
	return m.Size()
}
func (m *AdminFundGasOperationsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AdminFundGasOperationsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AdminFundGasOperationsRequest proto.InternalMessageInfo

func (m *AdminFundGasOperationsRequest) GetOwnerEthAddress() string {
	if m != nil {
		return m.OwnerEthAddress
	}
	return ""
}

func (m *AdminFundGasOperationsRequest) GetOwnerAnyID() string {
	if m != nil {
		return m.OwnerAnyID
	}
	return ""
}

func (m *AdminFundGasOperationsRequest) GetOperationsCount() uint64 {
	if m != nil {
		return m.OperationsCount
	}
	return 0
}

type AdminFundGasOperationsRequestSigned struct {
	// AdminFundGasOperationsRequest struct
	Payload []byte `protobuf:"bytes,1,opt,name=payload,proto3" json:"payload,omitempty"`
	// payload signed by Admin of this service
	Signature []byte `protobuf:"bytes,2,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (m *AdminFundGasOperationsRequestSigned) Reset()         { *m = AdminFundGasOperationsRequestSigned{} }
func (m *AdminFundGasOperationsRequestSigned) String() string { return proto.CompactTextString(m) }
func (*AdminFundGasOperationsRequestSigned) ProtoMessage()    {}
func (*AdminFundGasOperationsRequestSigned) Descriptor() ([]byte, []int) {
	return fileDescriptor_c9d3f9b8b141e804, []int{4}
}
func (m *AdminFundGasOperationsRequestSigned) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AdminFundGasOperationsRequestSigned) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AdminFundGasOperationsRequestSigned.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AdminFundGasOperationsRequestSigned) XXX_MarshalAppend(b []byte, newLen int) ([]byte, error) {
	b = b[:newLen]
	_, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b, nil
}
func (m *AdminFundGasOperationsRequestSigned) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AdminFundGasOperationsRequestSigned.Merge(m, src)
}
func (m *AdminFundGasOperationsRequestSigned) XXX_Size() int {
	return m.Size()
}
func (m *AdminFundGasOperationsRequestSigned) XXX_DiscardUnknown() {
	xxx_messageInfo_AdminFundGasOperationsRequestSigned.DiscardUnknown(m)
}

var xxx_messageInfo_AdminFundGasOperationsRequestSigned proto.InternalMessageInfo

func (m *AdminFundGasOperationsRequestSigned) GetPayload() []byte {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (m *AdminFundGasOperationsRequestSigned) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

// no signature required here
type GetUserAccountRequest struct {
	// An Ethereum address that owns that account
	OwnerEthAddress string `protobuf:"bytes,1,opt,name=ownerEthAddress,proto3" json:"ownerEthAddress,omitempty"`
}

func (m *GetUserAccountRequest) Reset()         { *m = GetUserAccountRequest{} }
func (m *GetUserAccountRequest) String() string { return proto.CompactTextString(m) }
func (*GetUserAccountRequest) ProtoMessage()    {}
func (*GetUserAccountRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c9d3f9b8b141e804, []int{5}
}
func (m *GetUserAccountRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetUserAccountRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetUserAccountRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetUserAccountRequest) XXX_MarshalAppend(b []byte, newLen int) ([]byte, error) {
	b = b[:newLen]
	_, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b, nil
}
func (m *GetUserAccountRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetUserAccountRequest.Merge(m, src)
}
func (m *GetUserAccountRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetUserAccountRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetUserAccountRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetUserAccountRequest proto.InternalMessageInfo

func (m *GetUserAccountRequest) GetOwnerEthAddress() string {
	if m != nil {
		return m.OwnerEthAddress
	}
	return ""
}

type GetDataNameRegisterResponse struct {
	Data    []byte `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	Context []byte `protobuf:"bytes,2,opt,name=context,proto3" json:"context,omitempty"`
}

func (m *GetDataNameRegisterResponse) Reset()         { *m = GetDataNameRegisterResponse{} }
func (m *GetDataNameRegisterResponse) String() string { return proto.CompactTextString(m) }
func (*GetDataNameRegisterResponse) ProtoMessage()    {}
func (*GetDataNameRegisterResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c9d3f9b8b141e804, []int{6}
}
func (m *GetDataNameRegisterResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetDataNameRegisterResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetDataNameRegisterResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetDataNameRegisterResponse) XXX_MarshalAppend(b []byte, newLen int) ([]byte, error) {
	b = b[:newLen]
	_, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b, nil
}
func (m *GetDataNameRegisterResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetDataNameRegisterResponse.Merge(m, src)
}
func (m *GetDataNameRegisterResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetDataNameRegisterResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetDataNameRegisterResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetDataNameRegisterResponse proto.InternalMessageInfo

func (m *GetDataNameRegisterResponse) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *GetDataNameRegisterResponse) GetContext() []byte {
	if m != nil {
		return m.Context
	}
	return nil
}

type CreateUserOperationRequest struct {
	Data []byte `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	// "data" signed with Ethereum private key
	SignedData      []byte `protobuf:"bytes,2,opt,name=signedData,proto3" json:"signedData,omitempty"`
	Context         []byte `protobuf:"bytes,3,opt,name=context,proto3" json:"context,omitempty"`
	OwnerEthAddress string `protobuf:"bytes,4,opt,name=ownerEthAddress,proto3" json:"ownerEthAddress,omitempty"`
	// in the following format: "A5k2d9sFZw84yisTxRnz2bPRd1YPfVfhxqymZ6yESprFTG65"
	// you can get it with Account().SignKey.GetPublic().Account()
	OwnerAnyID string `protobuf:"bytes,5,opt,name=ownerAnyID,proto3" json:"ownerAnyID,omitempty"`
	// all operations currently are towards single name, please specify it
	// we can use it for caching, etc purps.
	FullName string `protobuf:"bytes,6,opt,name=fullName,proto3" json:"fullName,omitempty"`
}

func (m *CreateUserOperationRequest) Reset()         { *m = CreateUserOperationRequest{} }
func (m *CreateUserOperationRequest) String() string { return proto.CompactTextString(m) }
func (*CreateUserOperationRequest) ProtoMessage()    {}
func (*CreateUserOperationRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c9d3f9b8b141e804, []int{7}
}
func (m *CreateUserOperationRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateUserOperationRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreateUserOperationRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CreateUserOperationRequest) XXX_MarshalAppend(b []byte, newLen int) ([]byte, error) {
	b = b[:newLen]
	_, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b, nil
}
func (m *CreateUserOperationRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateUserOperationRequest.Merge(m, src)
}
func (m *CreateUserOperationRequest) XXX_Size() int {
	return m.Size()
}
func (m *CreateUserOperationRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateUserOperationRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CreateUserOperationRequest proto.InternalMessageInfo

func (m *CreateUserOperationRequest) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *CreateUserOperationRequest) GetSignedData() []byte {
	if m != nil {
		return m.SignedData
	}
	return nil
}

func (m *CreateUserOperationRequest) GetContext() []byte {
	if m != nil {
		return m.Context
	}
	return nil
}

func (m *CreateUserOperationRequest) GetOwnerEthAddress() string {
	if m != nil {
		return m.OwnerEthAddress
	}
	return ""
}

func (m *CreateUserOperationRequest) GetOwnerAnyID() string {
	if m != nil {
		return m.OwnerAnyID
	}
	return ""
}

func (m *CreateUserOperationRequest) GetFullName() string {
	if m != nil {
		return m.FullName
	}
	return ""
}

type CreateUserOperationRequestSigned struct {
	// CreateUserOperationRequest struct
	Payload []byte `protobuf:"bytes,1,opt,name=payload,proto3" json:"payload,omitempty"`
	// payload signed with Anytype identity
	Signature []byte `protobuf:"bytes,2,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (m *CreateUserOperationRequestSigned) Reset()         { *m = CreateUserOperationRequestSigned{} }
func (m *CreateUserOperationRequestSigned) String() string { return proto.CompactTextString(m) }
func (*CreateUserOperationRequestSigned) ProtoMessage()    {}
func (*CreateUserOperationRequestSigned) Descriptor() ([]byte, []int) {
	return fileDescriptor_c9d3f9b8b141e804, []int{8}
}
func (m *CreateUserOperationRequestSigned) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateUserOperationRequestSigned) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreateUserOperationRequestSigned.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CreateUserOperationRequestSigned) XXX_MarshalAppend(b []byte, newLen int) ([]byte, error) {
	b = b[:newLen]
	_, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b, nil
}
func (m *CreateUserOperationRequestSigned) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateUserOperationRequestSigned.Merge(m, src)
}
func (m *CreateUserOperationRequestSigned) XXX_Size() int {
	return m.Size()
}
func (m *CreateUserOperationRequestSigned) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateUserOperationRequestSigned.DiscardUnknown(m)
}

var xxx_messageInfo_CreateUserOperationRequestSigned proto.InternalMessageInfo

func (m *CreateUserOperationRequestSigned) GetPayload() []byte {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (m *CreateUserOperationRequestSigned) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

type NameRegisterRequest struct {
	FullName string `protobuf:"bytes,1,opt,name=fullName,proto3" json:"fullName,omitempty"`
	// A content hash attached to this name
	// This should not be empty!
	// in the following format: "A5k2d9sFZw84yisTxRnz2bPRd1YPfVfhxqymZ6yESprFTG65"
	// you can get it with Account().SignKey.GetPublic().Account()
	OwnerAnyAddress string `protobuf:"bytes,2,opt,name=ownerAnyAddress,proto3" json:"ownerAnyAddress,omitempty"`
	// An Ethereum address that owns that name
	OwnerEthAddress string `protobuf:"bytes,3,opt,name=ownerEthAddress,proto3" json:"ownerEthAddress,omitempty"`
	// if false -> name ownership will belong to ownerEthAddress
	// if true -> name ownership will belong to SCW of ownerEthAddress (AccountAbstraction)
	RegisterToSmartContractWallet bool `protobuf:"varint,4,opt,name=registerToSmartContractWallet,proto3" json:"registerToSmartContractWallet,omitempty"`
	// How many months to register the name for
	RegisterPeriodMonths uint32 `protobuf:"varint,5,opt,name=registerPeriodMonths,proto3" json:"registerPeriodMonths,omitempty"`
}

func (m *NameRegisterRequest) Reset()         { *m = NameRegisterRequest{} }
func (m *NameRegisterRequest) String() string { return proto.CompactTextString(m) }
func (*NameRegisterRequest) ProtoMessage()    {}
func (*NameRegisterRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c9d3f9b8b141e804, []int{9}
}
func (m *NameRegisterRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NameRegisterRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NameRegisterRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NameRegisterRequest) XXX_MarshalAppend(b []byte, newLen int) ([]byte, error) {
	b = b[:newLen]
	_, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b, nil
}
func (m *NameRegisterRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NameRegisterRequest.Merge(m, src)
}
func (m *NameRegisterRequest) XXX_Size() int {
	return m.Size()
}
func (m *NameRegisterRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_NameRegisterRequest.DiscardUnknown(m)
}

var xxx_messageInfo_NameRegisterRequest proto.InternalMessageInfo

func (m *NameRegisterRequest) GetFullName() string {
	if m != nil {
		return m.FullName
	}
	return ""
}

func (m *NameRegisterRequest) GetOwnerAnyAddress() string {
	if m != nil {
		return m.OwnerAnyAddress
	}
	return ""
}

func (m *NameRegisterRequest) GetOwnerEthAddress() string {
	if m != nil {
		return m.OwnerEthAddress
	}
	return ""
}

func (m *NameRegisterRequest) GetRegisterToSmartContractWallet() bool {
	if m != nil {
		return m.RegisterToSmartContractWallet
	}
	return false
}

func (m *NameRegisterRequest) GetRegisterPeriodMonths() uint32 {
	if m != nil {
		return m.RegisterPeriodMonths
	}
	return 0
}

type NameRegisterRequestSigned struct {
	// NameRegisterRequest struct
	Payload []byte `protobuf:"bytes,1,opt,name=payload,proto3" json:"payload,omitempty"`
	// payload signed by payload.ownerEthAddress
	Signature []byte `protobuf:"bytes,2,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (m *NameRegisterRequestSigned) Reset()         { *m = NameRegisterRequestSigned{} }
func (m *NameRegisterRequestSigned) String() string { return proto.CompactTextString(m) }
func (*NameRegisterRequestSigned) ProtoMessage()    {}
func (*NameRegisterRequestSigned) Descriptor() ([]byte, []int) {
	return fileDescriptor_c9d3f9b8b141e804, []int{10}
}
func (m *NameRegisterRequestSigned) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NameRegisterRequestSigned) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NameRegisterRequestSigned.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NameRegisterRequestSigned) XXX_MarshalAppend(b []byte, newLen int) ([]byte, error) {
	b = b[:newLen]
	_, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b, nil
}
func (m *NameRegisterRequestSigned) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NameRegisterRequestSigned.Merge(m, src)
}
func (m *NameRegisterRequestSigned) XXX_Size() int {
	return m.Size()
}
func (m *NameRegisterRequestSigned) XXX_DiscardUnknown() {
	xxx_messageInfo_NameRegisterRequestSigned.DiscardUnknown(m)
}

var xxx_messageInfo_NameRegisterRequestSigned proto.InternalMessageInfo

func (m *NameRegisterRequestSigned) GetPayload() []byte {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (m *NameRegisterRequestSigned) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

type NameRegisterForSpaceRequest struct {
	FullName string `protobuf:"bytes,1,opt,name=fullName,proto3" json:"fullName,omitempty"`
	// A content hash attached to this name
	// This should not be empty!
	// in the following format: "A5k2d9sFZw84yisTxRnz2bPRd1YPfVfhxqymZ6yESprFTG65"
	// you can get it with Account().SignKey.GetPublic().Account()
	OwnerAnyAddress string `protobuf:"bytes,2,opt,name=ownerAnyAddress,proto3" json:"ownerAnyAddress,omitempty"`
	// An Ethereum address that owns that name
	OwnerEthAddress string `protobuf:"bytes,3,opt,name=ownerEthAddress,proto3" json:"ownerEthAddress,omitempty"`
	// A SpaceID attached to this name
	SpaceId string `protobuf:"bytes,4,opt,name=spaceId,proto3" json:"spaceId,omitempty"`
	// How many months to register the name for
	RegisterPeriodMonths uint32 `protobuf:"varint,5,opt,name=registerPeriodMonths,proto3" json:"registerPeriodMonths,omitempty"`
}

func (m *NameRegisterForSpaceRequest) Reset()         { *m = NameRegisterForSpaceRequest{} }
func (m *NameRegisterForSpaceRequest) String() string { return proto.CompactTextString(m) }
func (*NameRegisterForSpaceRequest) ProtoMessage()    {}
func (*NameRegisterForSpaceRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c9d3f9b8b141e804, []int{11}
}
func (m *NameRegisterForSpaceRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NameRegisterForSpaceRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NameRegisterForSpaceRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NameRegisterForSpaceRequest) XXX_MarshalAppend(b []byte, newLen int) ([]byte, error) {
	b = b[:newLen]
	_, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b, nil
}
func (m *NameRegisterForSpaceRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NameRegisterForSpaceRequest.Merge(m, src)
}
func (m *NameRegisterForSpaceRequest) XXX_Size() int {
	return m.Size()
}
func (m *NameRegisterForSpaceRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_NameRegisterForSpaceRequest.DiscardUnknown(m)
}

var xxx_messageInfo_NameRegisterForSpaceRequest proto.InternalMessageInfo

func (m *NameRegisterForSpaceRequest) GetFullName() string {
	if m != nil {
		return m.FullName
	}
	return ""
}

func (m *NameRegisterForSpaceRequest) GetOwnerAnyAddress() string {
	if m != nil {
		return m.OwnerAnyAddress
	}
	return ""
}

func (m *NameRegisterForSpaceRequest) GetOwnerEthAddress() string {
	if m != nil {
		return m.OwnerEthAddress
	}
	return ""
}

func (m *NameRegisterForSpaceRequest) GetSpaceId() string {
	if m != nil {
		return m.SpaceId
	}
	return ""
}

func (m *NameRegisterForSpaceRequest) GetRegisterPeriodMonths() uint32 {
	if m != nil {
		return m.RegisterPeriodMonths
	}
	return 0
}

type GetOperationStatusRequest struct {
	OperationId string `protobuf:"bytes,1,opt,name=operationId,proto3" json:"operationId,omitempty"`
}

func (m *GetOperationStatusRequest) Reset()         { *m = GetOperationStatusRequest{} }
func (m *GetOperationStatusRequest) String() string { return proto.CompactTextString(m) }
func (*GetOperationStatusRequest) ProtoMessage()    {}
func (*GetOperationStatusRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c9d3f9b8b141e804, []int{12}
}
func (m *GetOperationStatusRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetOperationStatusRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetOperationStatusRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetOperationStatusRequest) XXX_MarshalAppend(b []byte, newLen int) ([]byte, error) {
	b = b[:newLen]
	_, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b, nil
}
func (m *GetOperationStatusRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetOperationStatusRequest.Merge(m, src)
}
func (m *GetOperationStatusRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetOperationStatusRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetOperationStatusRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetOperationStatusRequest proto.InternalMessageInfo

func (m *GetOperationStatusRequest) GetOperationId() string {
	if m != nil {
		return m.OperationId
	}
	return ""
}

type OperationResponse struct {
	OperationId    string         `protobuf:"bytes,1,opt,name=operationId,proto3" json:"operationId,omitempty"`
	OperationState OperationState `protobuf:"varint,2,opt,name=operationState,proto3,enum=OperationState" json:"operationState,omitempty"`
}

func (m *OperationResponse) Reset()         { *m = OperationResponse{} }
func (m *OperationResponse) String() string { return proto.CompactTextString(m) }
func (*OperationResponse) ProtoMessage()    {}
func (*OperationResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c9d3f9b8b141e804, []int{13}
}
func (m *OperationResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OperationResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OperationResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *OperationResponse) XXX_MarshalAppend(b []byte, newLen int) ([]byte, error) {
	b = b[:newLen]
	_, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b, nil
}
func (m *OperationResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OperationResponse.Merge(m, src)
}
func (m *OperationResponse) XXX_Size() int {
	return m.Size()
}
func (m *OperationResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_OperationResponse.DiscardUnknown(m)
}

var xxx_messageInfo_OperationResponse proto.InternalMessageInfo

func (m *OperationResponse) GetOperationId() string {
	if m != nil {
		return m.OperationId
	}
	return ""
}

func (m *OperationResponse) GetOperationState() OperationState {
	if m != nil {
		return m.OperationState
	}
	return OperationState_Unknown
}

func init() {
	proto.RegisterEnum("OperationState", OperationState_name, OperationState_value)
	proto.RegisterType((*UserAccount)(nil), "UserAccount")
	proto.RegisterType((*AdminFundUserAccountRequest)(nil), "AdminFundUserAccountRequest")
	proto.RegisterType((*AdminFundUserAccountRequestSigned)(nil), "AdminFundUserAccountRequestSigned")
	proto.RegisterType((*AdminFundGasOperationsRequest)(nil), "AdminFundGasOperationsRequest")
	proto.RegisterType((*AdminFundGasOperationsRequestSigned)(nil), "AdminFundGasOperationsRequestSigned")
	proto.RegisterType((*GetUserAccountRequest)(nil), "GetUserAccountRequest")
	proto.RegisterType((*GetDataNameRegisterResponse)(nil), "GetDataNameRegisterResponse")
	proto.RegisterType((*CreateUserOperationRequest)(nil), "CreateUserOperationRequest")
	proto.RegisterType((*CreateUserOperationRequestSigned)(nil), "CreateUserOperationRequestSigned")
	proto.RegisterType((*NameRegisterRequest)(nil), "NameRegisterRequest")
	proto.RegisterType((*NameRegisterRequestSigned)(nil), "NameRegisterRequestSigned")
	proto.RegisterType((*NameRegisterForSpaceRequest)(nil), "NameRegisterForSpaceRequest")
	proto.RegisterType((*GetOperationStatusRequest)(nil), "GetOperationStatusRequest")
	proto.RegisterType((*OperationResponse)(nil), "OperationResponse")
}

func init() {
	proto.RegisterFile("nameservice/nameserviceproto/protos/nameservice_aa.proto", fileDescriptor_c9d3f9b8b141e804)
}

var fileDescriptor_c9d3f9b8b141e804 = []byte{
	// 831 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xc4, 0x56, 0x51, 0x6f, 0x1b, 0x45,
	0x10, 0xf6, 0xc5, 0x97, 0x26, 0x9e, 0xb8, 0xae, 0xbb, 0x4e, 0x8b, 0xeb, 0xb8, 0x87, 0x7b, 0x20,
	0x64, 0xf1, 0x70, 0x45, 0x41, 0x82, 0xbe, 0x20, 0x71, 0xd8, 0xb5, 0x89, 0x0a, 0x69, 0x74, 0x6e,
	0x85, 0xd4, 0x08, 0xa1, 0xad, 0x6f, 0xea, 0x9e, 0xb0, 0x77, 0xcd, 0xee, 0x9a, 0xe2, 0x7f, 0x81,
	0xc4, 0x4f, 0xe0, 0x47, 0xf0, 0x17, 0x78, 0xcc, 0x23, 0x12, 0x2f, 0x28, 0xf9, 0x21, 0x20, 0x6f,
	0xce, 0xd7, 0x3d, 0xf7, 0x6c, 0x97, 0xf8, 0xa1, 0x2f, 0xc9, 0xcd, 0x77, 0x73, 0x33, 0xdf, 0x7c,
	0xb3, 0x3b, 0x63, 0x78, 0xc0, 0xe8, 0x08, 0x25, 0x8a, 0x9f, 0xa3, 0x3e, 0xde, 0x37, 0x9e, 0xc7,
	0x82, 0x2b, 0x7e, 0x5f, 0xff, 0x95, 0x26, 0xfe, 0x03, 0xa5, 0x9e, 0x46, 0xdd, 0xdf, 0xb7, 0x60,
	0xef, 0xa9, 0x44, 0xe1, 0xf7, 0xfb, 0x7c, 0xc2, 0x14, 0x69, 0xc2, 0x0d, 0xfe, 0x8a, 0xa1, 0x78,
	0xa8, 0x5e, 0xfa, 0x61, 0x28, 0x50, 0xca, 0xaa, 0xd5, 0xb0, 0x9a, 0x85, 0x60, 0x11, 0x26, 0x1d,
	0x70, 0x34, 0xd4, 0x1b, 0x51, 0xa1, 0x5a, 0x9c, 0x29, 0x41, 0xfb, 0xdf, 0xd1, 0xe1, 0x10, 0xd5,
	0xfc, 0xc3, 0x2d, 0xfd, 0xe1, 0x1a, 0x2f, 0xf2, 0x35, 0xbc, 0xbf, 0xc4, 0xa3, 0x8d, 0xe3, 0x21,
	0x9f, 0x62, 0x58, 0xcd, 0x37, 0xac, 0xe6, 0x6e, 0xb0, 0xce, 0x8d, 0x7c, 0x04, 0x25, 0x5d, 0x63,
	0x6b, 0x56, 0xc9, 0x37, 0xf8, 0x42, 0x55, 0xed, 0x86, 0xd5, 0xb4, 0x83, 0x05, 0x94, 0x7c, 0x02,
	0x15, 0x3e, 0x46, 0x41, 0x55, 0xc4, 0x99, 0xe1, 0xbc, 0xad, 0x9d, 0xb3, 0x5e, 0xb9, 0x03, 0x38,
	0xf0, 0xc3, 0x51, 0xc4, 0x3a, 0x13, 0x16, 0x1a, 0x6a, 0x05, 0xf8, 0xd3, 0x04, 0xe5, 0xff, 0x11,
	0xcd, 0x01, 0x78, 0x4d, 0x46, 0x0b, 0x64, 0x07, 0x06, 0xe2, 0x9e, 0xc2, 0xbd, 0x15, 0x89, 0x7a,
	0xd1, 0x80, 0x61, 0x48, 0xaa, 0xb0, 0x33, 0xa6, 0xd3, 0x21, 0xa7, 0xa1, 0x4e, 0x53, 0x0c, 0xe6,
	0x26, 0xa9, 0x43, 0x41, 0x46, 0x03, 0x46, 0xd5, 0x44, 0xa0, 0x8e, 0x5e, 0x0c, 0x5e, 0x03, 0xee,
	0x6f, 0x16, 0xdc, 0x4d, 0xa2, 0x77, 0xa9, 0x7c, 0x9c, 0x54, 0x7a, 0xa5, 0x42, 0x34, 0xe4, 0xb3,
	0xe9, 0x51, 0x3b, 0xee, 0xb4, 0x81, 0xe8, 0x48, 0x69, 0x21, 0x75, 0x17, 0xed, 0x60, 0x11, 0x76,
	0xbf, 0x87, 0x0f, 0x56, 0x92, 0xda, 0xb0, 0x68, 0x1f, 0x6e, 0x75, 0x51, 0x6d, 0xd2, 0x34, 0xf7,
	0x11, 0x1c, 0x74, 0x51, 0xb5, 0xa9, 0xa2, 0xc7, 0x74, 0x84, 0x01, 0x0e, 0x22, 0xa9, 0x50, 0x04,
	0x28, 0xc7, 0x9c, 0x49, 0x24, 0x04, 0xec, 0x90, 0x2a, 0x1a, 0xd3, 0xd2, 0xcf, 0x33, 0xb6, 0x7d,
	0xce, 0x14, 0xfe, 0xa2, 0x62, 0x46, 0x73, 0xd3, 0x3d, 0xb3, 0xa0, 0xd6, 0x12, 0x48, 0x15, 0xce,
	0x38, 0x25, 0xd5, 0xce, 0x59, 0x65, 0x05, 0x73, 0x00, 0xa4, 0x16, 0x61, 0x46, 0x21, 0x8e, 0x67,
	0x20, 0x66, 0xb2, 0x7c, 0x2a, 0x59, 0x56, 0x8d, 0xf6, 0xdb, 0xf4, 0x73, 0xfb, 0x8d, 0x7e, 0xd6,
	0x60, 0xf7, 0xc5, 0x64, 0x38, 0x9c, 0x09, 0x50, 0xbd, 0xa6, 0xdf, 0x26, 0xb6, 0xfb, 0x0c, 0x1a,
	0xcb, 0x2b, 0xda, 0xb0, 0x7d, 0xff, 0x5a, 0x50, 0x49, 0xab, 0x7e, 0xa9, 0x93, 0xc9, 0xc7, 0x4a,
	0xf3, 0x49, 0xaa, 0xf6, 0xd9, 0x34, 0x3d, 0x8a, 0x16, 0xe1, 0x2c, 0x7d, 0xf2, 0xd9, 0xfa, 0xb4,
	0xe1, 0xae, 0x88, 0x29, 0x3c, 0xe1, 0xe6, 0x0c, 0x52, 0x97, 0x43, 0x48, 0xeb, 0xba, 0x1b, 0xac,
	0x76, 0x22, 0x87, 0xb0, 0x3f, 0x77, 0x38, 0x41, 0x11, 0xf1, 0xf0, 0x5b, 0xce, 0xd4, 0x4b, 0xa9,
	0xf5, 0xbe, 0x1e, 0x64, 0xbe, 0x73, 0x7b, 0x70, 0x27, 0x43, 0x80, 0x0d, 0x65, 0xfd, 0xdb, 0x82,
	0x03, 0x33, 0x6a, 0x87, 0x8b, 0xde, 0x98, 0xf6, 0xf1, 0x5d, 0xc9, 0x5b, 0x85, 0x1d, 0x39, 0xcb,
	0x7f, 0x14, 0xc6, 0x07, 0x74, 0x6e, 0x5e, 0x49, 0xb2, 0x2f, 0xe0, 0x4e, 0x17, 0x55, 0x72, 0x12,
	0x7b, 0x8a, 0xaa, 0x49, 0x32, 0xe3, 0x1a, 0xb0, 0x97, 0x8c, 0xa0, 0xa3, 0x30, 0xae, 0xce, 0x84,
	0x5c, 0x06, 0x37, 0x8d, 0x53, 0x1c, 0xdf, 0xf2, 0xb5, 0x9f, 0x91, 0xcf, 0xa1, 0xc4, 0xcd, 0x94,
	0x97, 0xb2, 0x97, 0x0e, 0x6f, 0x78, 0x29, 0x26, 0x18, 0x2c, 0xb8, 0x7d, 0x7c, 0x0a, 0xa5, 0xb4,
	0x07, 0xd9, 0x83, 0x9d, 0xa7, 0xec, 0x47, 0xc6, 0x5f, 0xb1, 0x72, 0x6e, 0x66, 0x9c, 0x20, 0x0b,
	0x23, 0x36, 0x28, 0x5b, 0xe4, 0x16, 0xdc, 0x8c, 0x8d, 0xc7, 0xe2, 0x98, 0xab, 0x0e, 0x9f, 0xb0,
	0xb0, 0xbc, 0x45, 0xae, 0x43, 0xa1, 0xc5, 0x47, 0xe3, 0x21, 0x2a, 0x0c, 0xcb, 0x79, 0x52, 0x80,
	0xed, 0x87, 0x42, 0x70, 0x51, 0xb6, 0x0f, 0xff, 0xb0, 0xe1, 0x3d, 0x9f, 0x4d, 0x99, 0x8c, 0xc7,
	0x9f, 0xff, 0x5c, 0xea, 0x13, 0x19, 0x71, 0x46, 0xbe, 0x84, 0xa2, 0xa9, 0x13, 0xa9, 0x79, 0x4b,
	0x65, 0xab, 0x11, 0xef, 0x0d, 0x4d, 0xdc, 0x1c, 0x39, 0x81, 0xfd, 0xac, 0x7d, 0x45, 0x5c, 0x6f,
	0xed, 0x1a, 0x5b, 0x12, 0xf1, 0x09, 0xdc, 0xce, 0x5e, 0x07, 0xe4, 0x43, 0xef, 0x2d, 0xf6, 0xc4,
	0x92, 0xa8, 0x0f, 0xa0, 0x94, 0xde, 0x02, 0xe4, 0xb6, 0x97, 0xb9, 0x16, 0x6a, 0x45, 0xcf, 0x00,
	0xdd, 0x1c, 0x79, 0x04, 0x95, 0x8c, 0xe1, 0x4f, 0xf6, 0xbd, 0x8c, 0x4b, 0x59, 0xab, 0x7b, 0x2b,
	0x16, 0x85, 0x9b, 0x23, 0xa7, 0x99, 0x9b, 0x64, 0x7e, 0xf9, 0x48, 0xdd, 0x5b, 0x71, 0x27, 0xd7,
	0x06, 0x3f, 0x86, 0x4a, 0xc6, 0x18, 0x26, 0xf7, 0xbc, 0x75, 0xc3, 0x39, 0x5b, 0xb3, 0xaf, 0x3e,
	0xfb, 0xf3, 0xdc, 0xb1, 0xce, 0xce, 0x1d, 0xeb, 0x9f, 0x73, 0xc7, 0xfa, 0xf5, 0xc2, 0xc9, 0x9d,
	0x5d, 0x38, 0xb9, 0xbf, 0x2e, 0x9c, 0xdc, 0xb3, 0xfa, 0xaa, 0x9f, 0x9b, 0xcf, 0xaf, 0xe9, 0x7f,
	0x9f, 0xfe, 0x17, 0x00, 0x00, 0xff, 0xff, 0xe2, 0x3c, 0xfb, 0x3d, 0x95, 0x0a, 0x00, 0x00,
}

func (m *UserAccount) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserAccount) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UserAccount) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.OperationsCountLeft != 0 {
		i = encodeVarintNameserviceAa(dAtA, i, uint64(m.OperationsCountLeft))
		i--
		dAtA[i] = 0x28
	}
	if m.NamesCountLeft != 0 {
		i = encodeVarintNameserviceAa(dAtA, i, uint64(m.NamesCountLeft))
		i--
		dAtA[i] = 0x20
	}
	if m.OwnerSmartContracWalletDeployed {
		i--
		if m.OwnerSmartContracWalletDeployed {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if len(m.OwnerSmartContracWalletAddress) > 0 {
		i -= len(m.OwnerSmartContracWalletAddress)
		copy(dAtA[i:], m.OwnerSmartContracWalletAddress)
		i = encodeVarintNameserviceAa(dAtA, i, uint64(len(m.OwnerSmartContracWalletAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.OwnerEthAddress) > 0 {
		i -= len(m.OwnerEthAddress)
		copy(dAtA[i:], m.OwnerEthAddress)
		i = encodeVarintNameserviceAa(dAtA, i, uint64(len(m.OwnerEthAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AdminFundUserAccountRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AdminFundUserAccountRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AdminFundUserAccountRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.NamesCount != 0 {
		i = encodeVarintNameserviceAa(dAtA, i, uint64(m.NamesCount))
		i--
		dAtA[i] = 0x10
	}
	if len(m.OwnerEthAddress) > 0 {
		i -= len(m.OwnerEthAddress)
		copy(dAtA[i:], m.OwnerEthAddress)
		i = encodeVarintNameserviceAa(dAtA, i, uint64(len(m.OwnerEthAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AdminFundUserAccountRequestSigned) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AdminFundUserAccountRequestSigned) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AdminFundUserAccountRequestSigned) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Signature) > 0 {
		i -= len(m.Signature)
		copy(dAtA[i:], m.Signature)
		i = encodeVarintNameserviceAa(dAtA, i, uint64(len(m.Signature)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Payload) > 0 {
		i -= len(m.Payload)
		copy(dAtA[i:], m.Payload)
		i = encodeVarintNameserviceAa(dAtA, i, uint64(len(m.Payload)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AdminFundGasOperationsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AdminFundGasOperationsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AdminFundGasOperationsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.OperationsCount != 0 {
		i = encodeVarintNameserviceAa(dAtA, i, uint64(m.OperationsCount))
		i--
		dAtA[i] = 0x18
	}
	if len(m.OwnerAnyID) > 0 {
		i -= len(m.OwnerAnyID)
		copy(dAtA[i:], m.OwnerAnyID)
		i = encodeVarintNameserviceAa(dAtA, i, uint64(len(m.OwnerAnyID)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.OwnerEthAddress) > 0 {
		i -= len(m.OwnerEthAddress)
		copy(dAtA[i:], m.OwnerEthAddress)
		i = encodeVarintNameserviceAa(dAtA, i, uint64(len(m.OwnerEthAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AdminFundGasOperationsRequestSigned) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AdminFundGasOperationsRequestSigned) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AdminFundGasOperationsRequestSigned) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Signature) > 0 {
		i -= len(m.Signature)
		copy(dAtA[i:], m.Signature)
		i = encodeVarintNameserviceAa(dAtA, i, uint64(len(m.Signature)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Payload) > 0 {
		i -= len(m.Payload)
		copy(dAtA[i:], m.Payload)
		i = encodeVarintNameserviceAa(dAtA, i, uint64(len(m.Payload)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetUserAccountRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetUserAccountRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetUserAccountRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.OwnerEthAddress) > 0 {
		i -= len(m.OwnerEthAddress)
		copy(dAtA[i:], m.OwnerEthAddress)
		i = encodeVarintNameserviceAa(dAtA, i, uint64(len(m.OwnerEthAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetDataNameRegisterResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetDataNameRegisterResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetDataNameRegisterResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Context) > 0 {
		i -= len(m.Context)
		copy(dAtA[i:], m.Context)
		i = encodeVarintNameserviceAa(dAtA, i, uint64(len(m.Context)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Data) > 0 {
		i -= len(m.Data)
		copy(dAtA[i:], m.Data)
		i = encodeVarintNameserviceAa(dAtA, i, uint64(len(m.Data)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CreateUserOperationRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateUserOperationRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateUserOperationRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.FullName) > 0 {
		i -= len(m.FullName)
		copy(dAtA[i:], m.FullName)
		i = encodeVarintNameserviceAa(dAtA, i, uint64(len(m.FullName)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.OwnerAnyID) > 0 {
		i -= len(m.OwnerAnyID)
		copy(dAtA[i:], m.OwnerAnyID)
		i = encodeVarintNameserviceAa(dAtA, i, uint64(len(m.OwnerAnyID)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.OwnerEthAddress) > 0 {
		i -= len(m.OwnerEthAddress)
		copy(dAtA[i:], m.OwnerEthAddress)
		i = encodeVarintNameserviceAa(dAtA, i, uint64(len(m.OwnerEthAddress)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Context) > 0 {
		i -= len(m.Context)
		copy(dAtA[i:], m.Context)
		i = encodeVarintNameserviceAa(dAtA, i, uint64(len(m.Context)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.SignedData) > 0 {
		i -= len(m.SignedData)
		copy(dAtA[i:], m.SignedData)
		i = encodeVarintNameserviceAa(dAtA, i, uint64(len(m.SignedData)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Data) > 0 {
		i -= len(m.Data)
		copy(dAtA[i:], m.Data)
		i = encodeVarintNameserviceAa(dAtA, i, uint64(len(m.Data)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CreateUserOperationRequestSigned) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateUserOperationRequestSigned) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateUserOperationRequestSigned) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Signature) > 0 {
		i -= len(m.Signature)
		copy(dAtA[i:], m.Signature)
		i = encodeVarintNameserviceAa(dAtA, i, uint64(len(m.Signature)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Payload) > 0 {
		i -= len(m.Payload)
		copy(dAtA[i:], m.Payload)
		i = encodeVarintNameserviceAa(dAtA, i, uint64(len(m.Payload)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *NameRegisterRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NameRegisterRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NameRegisterRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.RegisterPeriodMonths != 0 {
		i = encodeVarintNameserviceAa(dAtA, i, uint64(m.RegisterPeriodMonths))
		i--
		dAtA[i] = 0x28
	}
	if m.RegisterToSmartContractWallet {
		i--
		if m.RegisterToSmartContractWallet {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if len(m.OwnerEthAddress) > 0 {
		i -= len(m.OwnerEthAddress)
		copy(dAtA[i:], m.OwnerEthAddress)
		i = encodeVarintNameserviceAa(dAtA, i, uint64(len(m.OwnerEthAddress)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.OwnerAnyAddress) > 0 {
		i -= len(m.OwnerAnyAddress)
		copy(dAtA[i:], m.OwnerAnyAddress)
		i = encodeVarintNameserviceAa(dAtA, i, uint64(len(m.OwnerAnyAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.FullName) > 0 {
		i -= len(m.FullName)
		copy(dAtA[i:], m.FullName)
		i = encodeVarintNameserviceAa(dAtA, i, uint64(len(m.FullName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *NameRegisterRequestSigned) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NameRegisterRequestSigned) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NameRegisterRequestSigned) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Signature) > 0 {
		i -= len(m.Signature)
		copy(dAtA[i:], m.Signature)
		i = encodeVarintNameserviceAa(dAtA, i, uint64(len(m.Signature)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Payload) > 0 {
		i -= len(m.Payload)
		copy(dAtA[i:], m.Payload)
		i = encodeVarintNameserviceAa(dAtA, i, uint64(len(m.Payload)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *NameRegisterForSpaceRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NameRegisterForSpaceRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NameRegisterForSpaceRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.RegisterPeriodMonths != 0 {
		i = encodeVarintNameserviceAa(dAtA, i, uint64(m.RegisterPeriodMonths))
		i--
		dAtA[i] = 0x28
	}
	if len(m.SpaceId) > 0 {
		i -= len(m.SpaceId)
		copy(dAtA[i:], m.SpaceId)
		i = encodeVarintNameserviceAa(dAtA, i, uint64(len(m.SpaceId)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.OwnerEthAddress) > 0 {
		i -= len(m.OwnerEthAddress)
		copy(dAtA[i:], m.OwnerEthAddress)
		i = encodeVarintNameserviceAa(dAtA, i, uint64(len(m.OwnerEthAddress)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.OwnerAnyAddress) > 0 {
		i -= len(m.OwnerAnyAddress)
		copy(dAtA[i:], m.OwnerAnyAddress)
		i = encodeVarintNameserviceAa(dAtA, i, uint64(len(m.OwnerAnyAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.FullName) > 0 {
		i -= len(m.FullName)
		copy(dAtA[i:], m.FullName)
		i = encodeVarintNameserviceAa(dAtA, i, uint64(len(m.FullName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetOperationStatusRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetOperationStatusRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetOperationStatusRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.OperationId) > 0 {
		i -= len(m.OperationId)
		copy(dAtA[i:], m.OperationId)
		i = encodeVarintNameserviceAa(dAtA, i, uint64(len(m.OperationId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *OperationResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OperationResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OperationResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.OperationState != 0 {
		i = encodeVarintNameserviceAa(dAtA, i, uint64(m.OperationState))
		i--
		dAtA[i] = 0x10
	}
	if len(m.OperationId) > 0 {
		i -= len(m.OperationId)
		copy(dAtA[i:], m.OperationId)
		i = encodeVarintNameserviceAa(dAtA, i, uint64(len(m.OperationId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintNameserviceAa(dAtA []byte, offset int, v uint64) int {
	offset -= sovNameserviceAa(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *UserAccount) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.OwnerEthAddress)
	if l > 0 {
		n += 1 + l + sovNameserviceAa(uint64(l))
	}
	l = len(m.OwnerSmartContracWalletAddress)
	if l > 0 {
		n += 1 + l + sovNameserviceAa(uint64(l))
	}
	if m.OwnerSmartContracWalletDeployed {
		n += 2
	}
	if m.NamesCountLeft != 0 {
		n += 1 + sovNameserviceAa(uint64(m.NamesCountLeft))
	}
	if m.OperationsCountLeft != 0 {
		n += 1 + sovNameserviceAa(uint64(m.OperationsCountLeft))
	}
	return n
}

func (m *AdminFundUserAccountRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.OwnerEthAddress)
	if l > 0 {
		n += 1 + l + sovNameserviceAa(uint64(l))
	}
	if m.NamesCount != 0 {
		n += 1 + sovNameserviceAa(uint64(m.NamesCount))
	}
	return n
}

func (m *AdminFundUserAccountRequestSigned) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Payload)
	if l > 0 {
		n += 1 + l + sovNameserviceAa(uint64(l))
	}
	l = len(m.Signature)
	if l > 0 {
		n += 1 + l + sovNameserviceAa(uint64(l))
	}
	return n
}

func (m *AdminFundGasOperationsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.OwnerEthAddress)
	if l > 0 {
		n += 1 + l + sovNameserviceAa(uint64(l))
	}
	l = len(m.OwnerAnyID)
	if l > 0 {
		n += 1 + l + sovNameserviceAa(uint64(l))
	}
	if m.OperationsCount != 0 {
		n += 1 + sovNameserviceAa(uint64(m.OperationsCount))
	}
	return n
}

func (m *AdminFundGasOperationsRequestSigned) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Payload)
	if l > 0 {
		n += 1 + l + sovNameserviceAa(uint64(l))
	}
	l = len(m.Signature)
	if l > 0 {
		n += 1 + l + sovNameserviceAa(uint64(l))
	}
	return n
}

func (m *GetUserAccountRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.OwnerEthAddress)
	if l > 0 {
		n += 1 + l + sovNameserviceAa(uint64(l))
	}
	return n
}

func (m *GetDataNameRegisterResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovNameserviceAa(uint64(l))
	}
	l = len(m.Context)
	if l > 0 {
		n += 1 + l + sovNameserviceAa(uint64(l))
	}
	return n
}

func (m *CreateUserOperationRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovNameserviceAa(uint64(l))
	}
	l = len(m.SignedData)
	if l > 0 {
		n += 1 + l + sovNameserviceAa(uint64(l))
	}
	l = len(m.Context)
	if l > 0 {
		n += 1 + l + sovNameserviceAa(uint64(l))
	}
	l = len(m.OwnerEthAddress)
	if l > 0 {
		n += 1 + l + sovNameserviceAa(uint64(l))
	}
	l = len(m.OwnerAnyID)
	if l > 0 {
		n += 1 + l + sovNameserviceAa(uint64(l))
	}
	l = len(m.FullName)
	if l > 0 {
		n += 1 + l + sovNameserviceAa(uint64(l))
	}
	return n
}

func (m *CreateUserOperationRequestSigned) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Payload)
	if l > 0 {
		n += 1 + l + sovNameserviceAa(uint64(l))
	}
	l = len(m.Signature)
	if l > 0 {
		n += 1 + l + sovNameserviceAa(uint64(l))
	}
	return n
}

func (m *NameRegisterRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.FullName)
	if l > 0 {
		n += 1 + l + sovNameserviceAa(uint64(l))
	}
	l = len(m.OwnerAnyAddress)
	if l > 0 {
		n += 1 + l + sovNameserviceAa(uint64(l))
	}
	l = len(m.OwnerEthAddress)
	if l > 0 {
		n += 1 + l + sovNameserviceAa(uint64(l))
	}
	if m.RegisterToSmartContractWallet {
		n += 2
	}
	if m.RegisterPeriodMonths != 0 {
		n += 1 + sovNameserviceAa(uint64(m.RegisterPeriodMonths))
	}
	return n
}

func (m *NameRegisterRequestSigned) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Payload)
	if l > 0 {
		n += 1 + l + sovNameserviceAa(uint64(l))
	}
	l = len(m.Signature)
	if l > 0 {
		n += 1 + l + sovNameserviceAa(uint64(l))
	}
	return n
}

func (m *NameRegisterForSpaceRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.FullName)
	if l > 0 {
		n += 1 + l + sovNameserviceAa(uint64(l))
	}
	l = len(m.OwnerAnyAddress)
	if l > 0 {
		n += 1 + l + sovNameserviceAa(uint64(l))
	}
	l = len(m.OwnerEthAddress)
	if l > 0 {
		n += 1 + l + sovNameserviceAa(uint64(l))
	}
	l = len(m.SpaceId)
	if l > 0 {
		n += 1 + l + sovNameserviceAa(uint64(l))
	}
	if m.RegisterPeriodMonths != 0 {
		n += 1 + sovNameserviceAa(uint64(m.RegisterPeriodMonths))
	}
	return n
}

func (m *GetOperationStatusRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.OperationId)
	if l > 0 {
		n += 1 + l + sovNameserviceAa(uint64(l))
	}
	return n
}

func (m *OperationResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.OperationId)
	if l > 0 {
		n += 1 + l + sovNameserviceAa(uint64(l))
	}
	if m.OperationState != 0 {
		n += 1 + sovNameserviceAa(uint64(m.OperationState))
	}
	return n
}

func sovNameserviceAa(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozNameserviceAa(x uint64) (n int) {
	return sovNameserviceAa(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *UserAccount) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNameserviceAa
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserAccount: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserAccount: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OwnerEthAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNameserviceAa
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNameserviceAa
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNameserviceAa
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OwnerEthAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OwnerSmartContracWalletAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNameserviceAa
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNameserviceAa
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNameserviceAa
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OwnerSmartContracWalletAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OwnerSmartContracWalletDeployed", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNameserviceAa
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.OwnerSmartContracWalletDeployed = bool(v != 0)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NamesCountLeft", wireType)
			}
			m.NamesCountLeft = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNameserviceAa
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NamesCountLeft |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OperationsCountLeft", wireType)
			}
			m.OperationsCountLeft = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNameserviceAa
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OperationsCountLeft |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipNameserviceAa(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNameserviceAa
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AdminFundUserAccountRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNameserviceAa
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AdminFundUserAccountRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AdminFundUserAccountRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OwnerEthAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNameserviceAa
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNameserviceAa
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNameserviceAa
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OwnerEthAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NamesCount", wireType)
			}
			m.NamesCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNameserviceAa
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NamesCount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipNameserviceAa(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNameserviceAa
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AdminFundUserAccountRequestSigned) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNameserviceAa
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AdminFundUserAccountRequestSigned: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AdminFundUserAccountRequestSigned: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Payload", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNameserviceAa
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthNameserviceAa
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthNameserviceAa
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Payload = append(m.Payload[:0], dAtA[iNdEx:postIndex]...)
			if m.Payload == nil {
				m.Payload = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signature", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNameserviceAa
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthNameserviceAa
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthNameserviceAa
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signature = append(m.Signature[:0], dAtA[iNdEx:postIndex]...)
			if m.Signature == nil {
				m.Signature = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNameserviceAa(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNameserviceAa
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AdminFundGasOperationsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNameserviceAa
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AdminFundGasOperationsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AdminFundGasOperationsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OwnerEthAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNameserviceAa
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNameserviceAa
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNameserviceAa
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OwnerEthAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OwnerAnyID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNameserviceAa
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNameserviceAa
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNameserviceAa
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OwnerAnyID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OperationsCount", wireType)
			}
			m.OperationsCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNameserviceAa
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OperationsCount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipNameserviceAa(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNameserviceAa
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AdminFundGasOperationsRequestSigned) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNameserviceAa
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AdminFundGasOperationsRequestSigned: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AdminFundGasOperationsRequestSigned: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Payload", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNameserviceAa
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthNameserviceAa
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthNameserviceAa
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Payload = append(m.Payload[:0], dAtA[iNdEx:postIndex]...)
			if m.Payload == nil {
				m.Payload = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signature", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNameserviceAa
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthNameserviceAa
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthNameserviceAa
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signature = append(m.Signature[:0], dAtA[iNdEx:postIndex]...)
			if m.Signature == nil {
				m.Signature = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNameserviceAa(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNameserviceAa
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetUserAccountRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNameserviceAa
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetUserAccountRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetUserAccountRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OwnerEthAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNameserviceAa
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNameserviceAa
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNameserviceAa
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OwnerEthAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNameserviceAa(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNameserviceAa
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetDataNameRegisterResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNameserviceAa
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetDataNameRegisterResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetDataNameRegisterResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNameserviceAa
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthNameserviceAa
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthNameserviceAa
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data[:0], dAtA[iNdEx:postIndex]...)
			if m.Data == nil {
				m.Data = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Context", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNameserviceAa
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthNameserviceAa
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthNameserviceAa
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Context = append(m.Context[:0], dAtA[iNdEx:postIndex]...)
			if m.Context == nil {
				m.Context = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNameserviceAa(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNameserviceAa
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateUserOperationRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNameserviceAa
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateUserOperationRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateUserOperationRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNameserviceAa
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthNameserviceAa
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthNameserviceAa
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data[:0], dAtA[iNdEx:postIndex]...)
			if m.Data == nil {
				m.Data = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SignedData", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNameserviceAa
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthNameserviceAa
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthNameserviceAa
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SignedData = append(m.SignedData[:0], dAtA[iNdEx:postIndex]...)
			if m.SignedData == nil {
				m.SignedData = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Context", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNameserviceAa
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthNameserviceAa
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthNameserviceAa
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Context = append(m.Context[:0], dAtA[iNdEx:postIndex]...)
			if m.Context == nil {
				m.Context = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OwnerEthAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNameserviceAa
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNameserviceAa
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNameserviceAa
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OwnerEthAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OwnerAnyID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNameserviceAa
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNameserviceAa
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNameserviceAa
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OwnerAnyID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FullName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNameserviceAa
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNameserviceAa
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNameserviceAa
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FullName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNameserviceAa(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNameserviceAa
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateUserOperationRequestSigned) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNameserviceAa
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateUserOperationRequestSigned: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateUserOperationRequestSigned: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Payload", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNameserviceAa
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthNameserviceAa
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthNameserviceAa
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Payload = append(m.Payload[:0], dAtA[iNdEx:postIndex]...)
			if m.Payload == nil {
				m.Payload = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signature", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNameserviceAa
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthNameserviceAa
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthNameserviceAa
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signature = append(m.Signature[:0], dAtA[iNdEx:postIndex]...)
			if m.Signature == nil {
				m.Signature = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNameserviceAa(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNameserviceAa
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NameRegisterRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNameserviceAa
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NameRegisterRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NameRegisterRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FullName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNameserviceAa
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNameserviceAa
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNameserviceAa
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FullName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OwnerAnyAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNameserviceAa
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNameserviceAa
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNameserviceAa
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OwnerAnyAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OwnerEthAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNameserviceAa
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNameserviceAa
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNameserviceAa
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OwnerEthAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RegisterToSmartContractWallet", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNameserviceAa
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RegisterToSmartContractWallet = bool(v != 0)
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RegisterPeriodMonths", wireType)
			}
			m.RegisterPeriodMonths = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNameserviceAa
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RegisterPeriodMonths |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipNameserviceAa(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNameserviceAa
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NameRegisterRequestSigned) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNameserviceAa
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NameRegisterRequestSigned: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NameRegisterRequestSigned: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Payload", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNameserviceAa
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthNameserviceAa
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthNameserviceAa
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Payload = append(m.Payload[:0], dAtA[iNdEx:postIndex]...)
			if m.Payload == nil {
				m.Payload = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signature", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNameserviceAa
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthNameserviceAa
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthNameserviceAa
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signature = append(m.Signature[:0], dAtA[iNdEx:postIndex]...)
			if m.Signature == nil {
				m.Signature = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNameserviceAa(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNameserviceAa
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NameRegisterForSpaceRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNameserviceAa
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NameRegisterForSpaceRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NameRegisterForSpaceRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FullName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNameserviceAa
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNameserviceAa
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNameserviceAa
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FullName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OwnerAnyAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNameserviceAa
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNameserviceAa
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNameserviceAa
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OwnerAnyAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OwnerEthAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNameserviceAa
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNameserviceAa
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNameserviceAa
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OwnerEthAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SpaceId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNameserviceAa
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNameserviceAa
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNameserviceAa
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SpaceId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RegisterPeriodMonths", wireType)
			}
			m.RegisterPeriodMonths = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNameserviceAa
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RegisterPeriodMonths |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipNameserviceAa(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNameserviceAa
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetOperationStatusRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNameserviceAa
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetOperationStatusRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetOperationStatusRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OperationId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNameserviceAa
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNameserviceAa
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNameserviceAa
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OperationId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNameserviceAa(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNameserviceAa
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OperationResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNameserviceAa
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OperationResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OperationResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OperationId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNameserviceAa
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNameserviceAa
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNameserviceAa
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OperationId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OperationState", wireType)
			}
			m.OperationState = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNameserviceAa
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OperationState |= OperationState(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipNameserviceAa(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNameserviceAa
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipNameserviceAa(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowNameserviceAa
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowNameserviceAa
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowNameserviceAa
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthNameserviceAa
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupNameserviceAa
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthNameserviceAa
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthNameserviceAa        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowNameserviceAa          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupNameserviceAa = fmt.Errorf("proto: unexpected end of group")
)
