// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: paymentservice/paymentserviceproto/protos/paymentservice.proto

package paymentserviceproto

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type SubscriptionTier int32

const (
	SubscriptionTier_TierUnknown SubscriptionTier = 0
	// "free" tier
	SubscriptionTier_TierExplorer SubscriptionTier = 1
	// these can be used just for testing in debug mode
	// it will still create an active subscription, but with NO features
	SubscriptionTier_TierBuilder1WeekTEST   SubscriptionTier = 2
	SubscriptionTier_TierCoCreator1WeekTEST SubscriptionTier = 3
	// these are the real tiers:
	SubscriptionTier_TierBuilder1Year   SubscriptionTier = 4
	SubscriptionTier_TierCoCreator1Year SubscriptionTier = 5
)

var SubscriptionTier_name = map[int32]string{
	0: "TierUnknown",
	1: "TierExplorer",
	2: "TierBuilder1WeekTEST",
	3: "TierCoCreator1WeekTEST",
	4: "TierBuilder1Year",
	5: "TierCoCreator1Year",
}

var SubscriptionTier_value = map[string]int32{
	"TierUnknown":            0,
	"TierExplorer":           1,
	"TierBuilder1WeekTEST":   2,
	"TierCoCreator1WeekTEST": 3,
	"TierBuilder1Year":       4,
	"TierCoCreator1Year":     5,
}

func (x SubscriptionTier) String() string {
	return proto.EnumName(SubscriptionTier_name, int32(x))
}

func (SubscriptionTier) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_4feb29dcc5ba50f6, []int{0}
}

type SubscriptionStatus int32

const (
	SubscriptionStatus_StatusUnknown SubscriptionStatus = 0
	// payment is still pending
	// this will be the status until the payment is confirmed or N is elapsed and no payment is received
	// in the last case the subscription will switch to Status_Unknown or Status_Active
	SubscriptionStatus_StatusPending SubscriptionStatus = 1
	SubscriptionStatus_StatusActive  SubscriptionStatus = 2
)

var SubscriptionStatus_name = map[int32]string{
	0: "StatusUnknown",
	1: "StatusPending",
	2: "StatusActive",
}

var SubscriptionStatus_value = map[string]int32{
	"StatusUnknown": 0,
	"StatusPending": 1,
	"StatusActive":  2,
}

func (x SubscriptionStatus) String() string {
	return proto.EnumName(SubscriptionStatus_name, int32(x))
}

func (SubscriptionStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_4feb29dcc5ba50f6, []int{1}
}

type PaymentMethod int32

const (
	PaymentMethod_MethodCard      PaymentMethod = 0
	PaymentMethod_MethodCrypto    PaymentMethod = 1
	PaymentMethod_MethodApplePay  PaymentMethod = 2
	PaymentMethod_MethodGooglePay PaymentMethod = 3
)

var PaymentMethod_name = map[int32]string{
	0: "MethodCard",
	1: "MethodCrypto",
	2: "MethodApplePay",
	3: "MethodGooglePay",
}

var PaymentMethod_value = map[string]int32{
	"MethodCard":      0,
	"MethodCrypto":    1,
	"MethodApplePay":  2,
	"MethodGooglePay": 3,
}

func (x PaymentMethod) String() string {
	return proto.EnumName(PaymentMethod_name, int32(x))
}

func (PaymentMethod) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_4feb29dcc5ba50f6, []int{2}
}

// 1
type GetSubscriptionRequest struct {
	// in the following format: "A5k2d9sFZw84yisTxRnz2bPRd1YPfVfhxqymZ6yESprFTG65"
	// you can get it with Account().SignKey.GetPublic().Account()
	OwnerAnyID string `protobuf:"bytes,1,opt,name=ownerAnyID,proto3" json:"ownerAnyID,omitempty"`
}

func (m *GetSubscriptionRequest) Reset()         { *m = GetSubscriptionRequest{} }
func (m *GetSubscriptionRequest) String() string { return proto.CompactTextString(m) }
func (*GetSubscriptionRequest) ProtoMessage()    {}
func (*GetSubscriptionRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4feb29dcc5ba50f6, []int{0}
}
func (m *GetSubscriptionRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetSubscriptionRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetSubscriptionRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetSubscriptionRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetSubscriptionRequest.Merge(m, src)
}
func (m *GetSubscriptionRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetSubscriptionRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetSubscriptionRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetSubscriptionRequest proto.InternalMessageInfo

func (m *GetSubscriptionRequest) GetOwnerAnyID() string {
	if m != nil {
		return m.OwnerAnyID
	}
	return ""
}

type GetSubscriptionRequestSigned struct {
	// GetSubscriptionRequest
	Payload []byte `protobuf:"bytes,1,opt,name=payload,proto3" json:"payload,omitempty"`
	// this is payload signed with payload.ownerAnyID
	Signature []byte `protobuf:"bytes,2,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (m *GetSubscriptionRequestSigned) Reset()         { *m = GetSubscriptionRequestSigned{} }
func (m *GetSubscriptionRequestSigned) String() string { return proto.CompactTextString(m) }
func (*GetSubscriptionRequestSigned) ProtoMessage()    {}
func (*GetSubscriptionRequestSigned) Descriptor() ([]byte, []int) {
	return fileDescriptor_4feb29dcc5ba50f6, []int{1}
}
func (m *GetSubscriptionRequestSigned) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetSubscriptionRequestSigned) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetSubscriptionRequestSigned.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetSubscriptionRequestSigned) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetSubscriptionRequestSigned.Merge(m, src)
}
func (m *GetSubscriptionRequestSigned) XXX_Size() int {
	return m.Size()
}
func (m *GetSubscriptionRequestSigned) XXX_DiscardUnknown() {
	xxx_messageInfo_GetSubscriptionRequestSigned.DiscardUnknown(m)
}

var xxx_messageInfo_GetSubscriptionRequestSigned proto.InternalMessageInfo

func (m *GetSubscriptionRequestSigned) GetPayload() []byte {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (m *GetSubscriptionRequestSigned) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

type GetSubscriptionResponse struct {
	Tier   SubscriptionTier   `protobuf:"varint,1,opt,name=tier,proto3,enum=SubscriptionTier" json:"tier,omitempty"`
	Status SubscriptionStatus `protobuf:"varint,2,opt,name=status,proto3,enum=SubscriptionStatus" json:"status,omitempty"`
	// TODO: use google.protobuf.Timestamp and marshall it
	DateStarted uint64 `protobuf:"varint,3,opt,name=dateStarted,proto3" json:"dateStarted,omitempty"`
	DateEnds    uint64 `protobuf:"varint,4,opt,name=dateEnds,proto3" json:"dateEnds,omitempty"`
	IsAutoRenew bool   `protobuf:"varint,5,opt,name=isAutoRenew,proto3" json:"isAutoRenew,omitempty"`
	// if client has "downgraded" - he is still able to use the service until the end of the period
	// (dateEnds) but then he will be on nextTier until nextTierEnds
	//
	// if Tier0_Unknown -> then no next tier
	NextTier      SubscriptionTier `protobuf:"varint,6,opt,name=nextTier,proto3,enum=SubscriptionTier" json:"nextTier,omitempty"`
	NextTierEnds  uint64           `protobuf:"varint,7,opt,name=nextTierEnds,proto3" json:"nextTierEnds,omitempty"`
	PaymentMethod PaymentMethod    `protobuf:"varint,8,opt,name=paymentMethod,proto3,enum=PaymentMethod" json:"paymentMethod,omitempty"`
	// if name was requested - it will be here
	// seeBuySubscriptionRequest.requestedAnyName field
	RequestedAnyName string `protobuf:"bytes,9,opt,name=requestedAnyName,proto3" json:"requestedAnyName,omitempty"`
	// if user verified her email OR provided it while buying a subscription, it will be here
	UserEmail string `protobuf:"bytes,10,opt,name=userEmail,proto3" json:"userEmail,omitempty"`
}

func (m *GetSubscriptionResponse) Reset()         { *m = GetSubscriptionResponse{} }
func (m *GetSubscriptionResponse) String() string { return proto.CompactTextString(m) }
func (*GetSubscriptionResponse) ProtoMessage()    {}
func (*GetSubscriptionResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4feb29dcc5ba50f6, []int{2}
}
func (m *GetSubscriptionResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetSubscriptionResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetSubscriptionResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetSubscriptionResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetSubscriptionResponse.Merge(m, src)
}
func (m *GetSubscriptionResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetSubscriptionResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetSubscriptionResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetSubscriptionResponse proto.InternalMessageInfo

func (m *GetSubscriptionResponse) GetTier() SubscriptionTier {
	if m != nil {
		return m.Tier
	}
	return SubscriptionTier_TierUnknown
}

func (m *GetSubscriptionResponse) GetStatus() SubscriptionStatus {
	if m != nil {
		return m.Status
	}
	return SubscriptionStatus_StatusUnknown
}

func (m *GetSubscriptionResponse) GetDateStarted() uint64 {
	if m != nil {
		return m.DateStarted
	}
	return 0
}

func (m *GetSubscriptionResponse) GetDateEnds() uint64 {
	if m != nil {
		return m.DateEnds
	}
	return 0
}

func (m *GetSubscriptionResponse) GetIsAutoRenew() bool {
	if m != nil {
		return m.IsAutoRenew
	}
	return false
}

func (m *GetSubscriptionResponse) GetNextTier() SubscriptionTier {
	if m != nil {
		return m.NextTier
	}
	return SubscriptionTier_TierUnknown
}

func (m *GetSubscriptionResponse) GetNextTierEnds() uint64 {
	if m != nil {
		return m.NextTierEnds
	}
	return 0
}

func (m *GetSubscriptionResponse) GetPaymentMethod() PaymentMethod {
	if m != nil {
		return m.PaymentMethod
	}
	return PaymentMethod_MethodCard
}

func (m *GetSubscriptionResponse) GetRequestedAnyName() string {
	if m != nil {
		return m.RequestedAnyName
	}
	return ""
}

func (m *GetSubscriptionResponse) GetUserEmail() string {
	if m != nil {
		return m.UserEmail
	}
	return ""
}

// 2
type BuySubscriptionRequest struct {
	// in the following format: "A5k2d9sFZw84yisTxRnz2bPRd1YPfVfhxqymZ6yESprFTG65"
	// you can get it with Account().SignKey.GetPublic().Account()
	OwnerAnyId string `protobuf:"bytes,1,opt,name=ownerAnyId,proto3" json:"ownerAnyId,omitempty"`
	// this is the owner's main EOA (Externally Owned Account) address
	// not AccountAbstraction's SCW (Smart Contract Wallet) address!
	// this is required to reserve a name for the owner (later that is done by user)
	// in the following format: "0x7a250d5630b4cf539739df2c5dacb4c659f2488d"
	OwnerEthAddress string           `protobuf:"bytes,2,opt,name=ownerEthAddress,proto3" json:"ownerEthAddress,omitempty"`
	RequestedTier   SubscriptionTier `protobuf:"varint,3,opt,name=requestedTier,proto3,enum=SubscriptionTier" json:"requestedTier,omitempty"`
	PaymentMethod   PaymentMethod    `protobuf:"varint,4,opt,name=paymentMethod,proto3,enum=PaymentMethod" json:"paymentMethod,omitempty"`
	// this is just to store the requested name in the DB
	// and then you will be able to retrieve it via GetSubscriptionRequest
	// PP won't register the name in NS!
	RequestedAnyName string `protobuf:"bytes,5,opt,name=requestedAnyName,proto3" json:"requestedAnyName,omitempty"`
}

func (m *BuySubscriptionRequest) Reset()         { *m = BuySubscriptionRequest{} }
func (m *BuySubscriptionRequest) String() string { return proto.CompactTextString(m) }
func (*BuySubscriptionRequest) ProtoMessage()    {}
func (*BuySubscriptionRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4feb29dcc5ba50f6, []int{3}
}
func (m *BuySubscriptionRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BuySubscriptionRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BuySubscriptionRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BuySubscriptionRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BuySubscriptionRequest.Merge(m, src)
}
func (m *BuySubscriptionRequest) XXX_Size() int {
	return m.Size()
}
func (m *BuySubscriptionRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_BuySubscriptionRequest.DiscardUnknown(m)
}

var xxx_messageInfo_BuySubscriptionRequest proto.InternalMessageInfo

func (m *BuySubscriptionRequest) GetOwnerAnyId() string {
	if m != nil {
		return m.OwnerAnyId
	}
	return ""
}

func (m *BuySubscriptionRequest) GetOwnerEthAddress() string {
	if m != nil {
		return m.OwnerEthAddress
	}
	return ""
}

func (m *BuySubscriptionRequest) GetRequestedTier() SubscriptionTier {
	if m != nil {
		return m.RequestedTier
	}
	return SubscriptionTier_TierUnknown
}

func (m *BuySubscriptionRequest) GetPaymentMethod() PaymentMethod {
	if m != nil {
		return m.PaymentMethod
	}
	return PaymentMethod_MethodCard
}

func (m *BuySubscriptionRequest) GetRequestedAnyName() string {
	if m != nil {
		return m.RequestedAnyName
	}
	return ""
}

type BuySubscriptionRequestSigned struct {
	// BuySubscriptionRequest
	Payload []byte `protobuf:"bytes,1,opt,name=payload,proto3" json:"payload,omitempty"`
	// this is payload signed with payload.ownerAnyID
	Signature []byte `protobuf:"bytes,2,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (m *BuySubscriptionRequestSigned) Reset()         { *m = BuySubscriptionRequestSigned{} }
func (m *BuySubscriptionRequestSigned) String() string { return proto.CompactTextString(m) }
func (*BuySubscriptionRequestSigned) ProtoMessage()    {}
func (*BuySubscriptionRequestSigned) Descriptor() ([]byte, []int) {
	return fileDescriptor_4feb29dcc5ba50f6, []int{4}
}
func (m *BuySubscriptionRequestSigned) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BuySubscriptionRequestSigned) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BuySubscriptionRequestSigned.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BuySubscriptionRequestSigned) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BuySubscriptionRequestSigned.Merge(m, src)
}
func (m *BuySubscriptionRequestSigned) XXX_Size() int {
	return m.Size()
}
func (m *BuySubscriptionRequestSigned) XXX_DiscardUnknown() {
	xxx_messageInfo_BuySubscriptionRequestSigned.DiscardUnknown(m)
}

var xxx_messageInfo_BuySubscriptionRequestSigned proto.InternalMessageInfo

func (m *BuySubscriptionRequestSigned) GetPayload() []byte {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (m *BuySubscriptionRequestSigned) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

type BuySubscriptionResponse struct {
	// will feature current billing ID
	// stripe.com/?client_reference_id=1234
	PaymentUrl string `protobuf:"bytes,1,opt,name=paymentUrl,proto3" json:"paymentUrl,omitempty"`
}

func (m *BuySubscriptionResponse) Reset()         { *m = BuySubscriptionResponse{} }
func (m *BuySubscriptionResponse) String() string { return proto.CompactTextString(m) }
func (*BuySubscriptionResponse) ProtoMessage()    {}
func (*BuySubscriptionResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4feb29dcc5ba50f6, []int{5}
}
func (m *BuySubscriptionResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BuySubscriptionResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BuySubscriptionResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BuySubscriptionResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BuySubscriptionResponse.Merge(m, src)
}
func (m *BuySubscriptionResponse) XXX_Size() int {
	return m.Size()
}
func (m *BuySubscriptionResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_BuySubscriptionResponse.DiscardUnknown(m)
}

var xxx_messageInfo_BuySubscriptionResponse proto.InternalMessageInfo

func (m *BuySubscriptionResponse) GetPaymentUrl() string {
	if m != nil {
		return m.PaymentUrl
	}
	return ""
}

type GetSubscriptionPortalLinkRequest struct {
	// in the following format: "A5k2d9sFZw84yisTxRnz2bPRd1YPfVfhxqymZ6yESprFTG65"
	// you can get it with Account().SignKey.GetPublic().Account()
	OwnerAnyId string `protobuf:"bytes,1,opt,name=ownerAnyId,proto3" json:"ownerAnyId,omitempty"`
}

func (m *GetSubscriptionPortalLinkRequest) Reset()         { *m = GetSubscriptionPortalLinkRequest{} }
func (m *GetSubscriptionPortalLinkRequest) String() string { return proto.CompactTextString(m) }
func (*GetSubscriptionPortalLinkRequest) ProtoMessage()    {}
func (*GetSubscriptionPortalLinkRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4feb29dcc5ba50f6, []int{6}
}
func (m *GetSubscriptionPortalLinkRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetSubscriptionPortalLinkRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetSubscriptionPortalLinkRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetSubscriptionPortalLinkRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetSubscriptionPortalLinkRequest.Merge(m, src)
}
func (m *GetSubscriptionPortalLinkRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetSubscriptionPortalLinkRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetSubscriptionPortalLinkRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetSubscriptionPortalLinkRequest proto.InternalMessageInfo

func (m *GetSubscriptionPortalLinkRequest) GetOwnerAnyId() string {
	if m != nil {
		return m.OwnerAnyId
	}
	return ""
}

type GetSubscriptionPortalLinkRequestSigned struct {
	// GetSubscriptionPortalLinkRequest
	Payload []byte `protobuf:"bytes,1,opt,name=payload,proto3" json:"payload,omitempty"`
	// this is payload signed with payload.ownerAnyID
	Signature []byte `protobuf:"bytes,2,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (m *GetSubscriptionPortalLinkRequestSigned) Reset() {
	*m = GetSubscriptionPortalLinkRequestSigned{}
}
func (m *GetSubscriptionPortalLinkRequestSigned) String() string { return proto.CompactTextString(m) }
func (*GetSubscriptionPortalLinkRequestSigned) ProtoMessage()    {}
func (*GetSubscriptionPortalLinkRequestSigned) Descriptor() ([]byte, []int) {
	return fileDescriptor_4feb29dcc5ba50f6, []int{7}
}
func (m *GetSubscriptionPortalLinkRequestSigned) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetSubscriptionPortalLinkRequestSigned) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetSubscriptionPortalLinkRequestSigned.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetSubscriptionPortalLinkRequestSigned) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetSubscriptionPortalLinkRequestSigned.Merge(m, src)
}
func (m *GetSubscriptionPortalLinkRequestSigned) XXX_Size() int {
	return m.Size()
}
func (m *GetSubscriptionPortalLinkRequestSigned) XXX_DiscardUnknown() {
	xxx_messageInfo_GetSubscriptionPortalLinkRequestSigned.DiscardUnknown(m)
}

var xxx_messageInfo_GetSubscriptionPortalLinkRequestSigned proto.InternalMessageInfo

func (m *GetSubscriptionPortalLinkRequestSigned) GetPayload() []byte {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (m *GetSubscriptionPortalLinkRequestSigned) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

type GetSubscriptionPortalLinkResponse struct {
	PortalUrl string `protobuf:"bytes,1,opt,name=portalUrl,proto3" json:"portalUrl,omitempty"`
}

func (m *GetSubscriptionPortalLinkResponse) Reset()         { *m = GetSubscriptionPortalLinkResponse{} }
func (m *GetSubscriptionPortalLinkResponse) String() string { return proto.CompactTextString(m) }
func (*GetSubscriptionPortalLinkResponse) ProtoMessage()    {}
func (*GetSubscriptionPortalLinkResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4feb29dcc5ba50f6, []int{8}
}
func (m *GetSubscriptionPortalLinkResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetSubscriptionPortalLinkResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetSubscriptionPortalLinkResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetSubscriptionPortalLinkResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetSubscriptionPortalLinkResponse.Merge(m, src)
}
func (m *GetSubscriptionPortalLinkResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetSubscriptionPortalLinkResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetSubscriptionPortalLinkResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetSubscriptionPortalLinkResponse proto.InternalMessageInfo

func (m *GetSubscriptionPortalLinkResponse) GetPortalUrl() string {
	if m != nil {
		return m.PortalUrl
	}
	return ""
}

type GetVerificationEmailRequest struct {
	// in the following format: "A5k2d9sFZw84yisTxRnz2bPRd1YPfVfhxqymZ6yESprFTG65"
	// you can get it with Account().SignKey.GetPublic().Account()
	OwnerAnyId            string `protobuf:"bytes,1,opt,name=ownerAnyId,proto3" json:"ownerAnyId,omitempty"`
	Email                 string `protobuf:"bytes,2,opt,name=email,proto3" json:"email,omitempty"`
	SubscribeToNewsletter bool   `protobuf:"varint,3,opt,name=subscribeToNewsletter,proto3" json:"subscribeToNewsletter,omitempty"`
}

func (m *GetVerificationEmailRequest) Reset()         { *m = GetVerificationEmailRequest{} }
func (m *GetVerificationEmailRequest) String() string { return proto.CompactTextString(m) }
func (*GetVerificationEmailRequest) ProtoMessage()    {}
func (*GetVerificationEmailRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4feb29dcc5ba50f6, []int{9}
}
func (m *GetVerificationEmailRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetVerificationEmailRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetVerificationEmailRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetVerificationEmailRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetVerificationEmailRequest.Merge(m, src)
}
func (m *GetVerificationEmailRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetVerificationEmailRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetVerificationEmailRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetVerificationEmailRequest proto.InternalMessageInfo

func (m *GetVerificationEmailRequest) GetOwnerAnyId() string {
	if m != nil {
		return m.OwnerAnyId
	}
	return ""
}

func (m *GetVerificationEmailRequest) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

func (m *GetVerificationEmailRequest) GetSubscribeToNewsletter() bool {
	if m != nil {
		return m.SubscribeToNewsletter
	}
	return false
}

type GetVerificationEmailResponse struct {
}

func (m *GetVerificationEmailResponse) Reset()         { *m = GetVerificationEmailResponse{} }
func (m *GetVerificationEmailResponse) String() string { return proto.CompactTextString(m) }
func (*GetVerificationEmailResponse) ProtoMessage()    {}
func (*GetVerificationEmailResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4feb29dcc5ba50f6, []int{10}
}
func (m *GetVerificationEmailResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetVerificationEmailResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetVerificationEmailResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetVerificationEmailResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetVerificationEmailResponse.Merge(m, src)
}
func (m *GetVerificationEmailResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetVerificationEmailResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetVerificationEmailResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetVerificationEmailResponse proto.InternalMessageInfo

type GetVerificationEmailRequestSigned struct {
	// GetVerificationEmailRequest
	Payload []byte `protobuf:"bytes,1,opt,name=payload,proto3" json:"payload,omitempty"`
	// this is payload signed with payload.ownerAnyID
	Signature []byte `protobuf:"bytes,2,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (m *GetVerificationEmailRequestSigned) Reset()         { *m = GetVerificationEmailRequestSigned{} }
func (m *GetVerificationEmailRequestSigned) String() string { return proto.CompactTextString(m) }
func (*GetVerificationEmailRequestSigned) ProtoMessage()    {}
func (*GetVerificationEmailRequestSigned) Descriptor() ([]byte, []int) {
	return fileDescriptor_4feb29dcc5ba50f6, []int{11}
}
func (m *GetVerificationEmailRequestSigned) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetVerificationEmailRequestSigned) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetVerificationEmailRequestSigned.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetVerificationEmailRequestSigned) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetVerificationEmailRequestSigned.Merge(m, src)
}
func (m *GetVerificationEmailRequestSigned) XXX_Size() int {
	return m.Size()
}
func (m *GetVerificationEmailRequestSigned) XXX_DiscardUnknown() {
	xxx_messageInfo_GetVerificationEmailRequestSigned.DiscardUnknown(m)
}

var xxx_messageInfo_GetVerificationEmailRequestSigned proto.InternalMessageInfo

func (m *GetVerificationEmailRequestSigned) GetPayload() []byte {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (m *GetVerificationEmailRequestSigned) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

type VerifyEmailRequest struct {
	// in the following format: "A5k2d9sFZw84yisTxRnz2bPRd1YPfVfhxqymZ6yESprFTG65"
	// you can get it with Account().SignKey.GetPublic().Account()
	OwnerAnyId string `protobuf:"bytes,1,opt,name=ownerAnyId,proto3" json:"ownerAnyId,omitempty"`
	// this is the owner's main EOA (Externally Owned Account) address
	// not AccountAbstraction's SCW (Smart Contract Wallet) address!
	// this is required to reserve a name for the owner (later that is done by user)
	// in the following format: "0x7a250d5630b4cf539739df2c5dacb4c659f2488d"
	OwnerEthAddress string `protobuf:"bytes,2,opt,name=ownerEthAddress,proto3" json:"ownerEthAddress,omitempty"`
	Code            string `protobuf:"bytes,3,opt,name=code,proto3" json:"code,omitempty"`
}

func (m *VerifyEmailRequest) Reset()         { *m = VerifyEmailRequest{} }
func (m *VerifyEmailRequest) String() string { return proto.CompactTextString(m) }
func (*VerifyEmailRequest) ProtoMessage()    {}
func (*VerifyEmailRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4feb29dcc5ba50f6, []int{12}
}
func (m *VerifyEmailRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VerifyEmailRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VerifyEmailRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VerifyEmailRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VerifyEmailRequest.Merge(m, src)
}
func (m *VerifyEmailRequest) XXX_Size() int {
	return m.Size()
}
func (m *VerifyEmailRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_VerifyEmailRequest.DiscardUnknown(m)
}

var xxx_messageInfo_VerifyEmailRequest proto.InternalMessageInfo

func (m *VerifyEmailRequest) GetOwnerAnyId() string {
	if m != nil {
		return m.OwnerAnyId
	}
	return ""
}

func (m *VerifyEmailRequest) GetOwnerEthAddress() string {
	if m != nil {
		return m.OwnerEthAddress
	}
	return ""
}

func (m *VerifyEmailRequest) GetCode() string {
	if m != nil {
		return m.Code
	}
	return ""
}

type VerifyEmailResponse struct {
	Success bool `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
}

func (m *VerifyEmailResponse) Reset()         { *m = VerifyEmailResponse{} }
func (m *VerifyEmailResponse) String() string { return proto.CompactTextString(m) }
func (*VerifyEmailResponse) ProtoMessage()    {}
func (*VerifyEmailResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4feb29dcc5ba50f6, []int{13}
}
func (m *VerifyEmailResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VerifyEmailResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VerifyEmailResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VerifyEmailResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VerifyEmailResponse.Merge(m, src)
}
func (m *VerifyEmailResponse) XXX_Size() int {
	return m.Size()
}
func (m *VerifyEmailResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_VerifyEmailResponse.DiscardUnknown(m)
}

var xxx_messageInfo_VerifyEmailResponse proto.InternalMessageInfo

func (m *VerifyEmailResponse) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

type VerifyEmailRequestSigned struct {
	// VerifyEmailRequest
	Payload []byte `protobuf:"bytes,1,opt,name=payload,proto3" json:"payload,omitempty"`
	// this is payload signed with payload.ownerAnyID
	Signature []byte `protobuf:"bytes,2,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (m *VerifyEmailRequestSigned) Reset()         { *m = VerifyEmailRequestSigned{} }
func (m *VerifyEmailRequestSigned) String() string { return proto.CompactTextString(m) }
func (*VerifyEmailRequestSigned) ProtoMessage()    {}
func (*VerifyEmailRequestSigned) Descriptor() ([]byte, []int) {
	return fileDescriptor_4feb29dcc5ba50f6, []int{14}
}
func (m *VerifyEmailRequestSigned) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VerifyEmailRequestSigned) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VerifyEmailRequestSigned.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VerifyEmailRequestSigned) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VerifyEmailRequestSigned.Merge(m, src)
}
func (m *VerifyEmailRequestSigned) XXX_Size() int {
	return m.Size()
}
func (m *VerifyEmailRequestSigned) XXX_DiscardUnknown() {
	xxx_messageInfo_VerifyEmailRequestSigned.DiscardUnknown(m)
}

var xxx_messageInfo_VerifyEmailRequestSigned proto.InternalMessageInfo

func (m *VerifyEmailRequestSigned) GetPayload() []byte {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (m *VerifyEmailRequestSigned) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

func init() {
	proto.RegisterEnum("SubscriptionTier", SubscriptionTier_name, SubscriptionTier_value)
	proto.RegisterEnum("SubscriptionStatus", SubscriptionStatus_name, SubscriptionStatus_value)
	proto.RegisterEnum("PaymentMethod", PaymentMethod_name, PaymentMethod_value)
	proto.RegisterType((*GetSubscriptionRequest)(nil), "GetSubscriptionRequest")
	proto.RegisterType((*GetSubscriptionRequestSigned)(nil), "GetSubscriptionRequestSigned")
	proto.RegisterType((*GetSubscriptionResponse)(nil), "GetSubscriptionResponse")
	proto.RegisterType((*BuySubscriptionRequest)(nil), "BuySubscriptionRequest")
	proto.RegisterType((*BuySubscriptionRequestSigned)(nil), "BuySubscriptionRequestSigned")
	proto.RegisterType((*BuySubscriptionResponse)(nil), "BuySubscriptionResponse")
	proto.RegisterType((*GetSubscriptionPortalLinkRequest)(nil), "GetSubscriptionPortalLinkRequest")
	proto.RegisterType((*GetSubscriptionPortalLinkRequestSigned)(nil), "GetSubscriptionPortalLinkRequestSigned")
	proto.RegisterType((*GetSubscriptionPortalLinkResponse)(nil), "GetSubscriptionPortalLinkResponse")
	proto.RegisterType((*GetVerificationEmailRequest)(nil), "GetVerificationEmailRequest")
	proto.RegisterType((*GetVerificationEmailResponse)(nil), "GetVerificationEmailResponse")
	proto.RegisterType((*GetVerificationEmailRequestSigned)(nil), "GetVerificationEmailRequestSigned")
	proto.RegisterType((*VerifyEmailRequest)(nil), "VerifyEmailRequest")
	proto.RegisterType((*VerifyEmailResponse)(nil), "VerifyEmailResponse")
	proto.RegisterType((*VerifyEmailRequestSigned)(nil), "VerifyEmailRequestSigned")
}

func init() {
	proto.RegisterFile("paymentservice/paymentserviceproto/protos/paymentservice.proto", fileDescriptor_4feb29dcc5ba50f6)
}

var fileDescriptor_4feb29dcc5ba50f6 = []byte{
	// 901 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x56, 0xcd, 0x6f, 0xe3, 0x44,
	0x14, 0xb7, 0x9b, 0xf4, 0x23, 0xaf, 0x6d, 0xea, 0x7d, 0xcd, 0x76, 0xbd, 0xa1, 0xb5, 0xc2, 0x48,
	0x40, 0x55, 0x84, 0x2b, 0xca, 0x4a, 0x80, 0x84, 0x10, 0x69, 0xa9, 0x2a, 0xa4, 0xb2, 0x8a, 0x9c,
	0xee, 0x22, 0x76, 0x2f, 0xb8, 0xf1, 0x23, 0x6b, 0x9a, 0xce, 0x98, 0xf1, 0x78, 0xbb, 0xfe, 0x13,
	0xb8, 0x71, 0xe5, 0xc6, 0xff, 0xc2, 0x85, 0xe3, 0x1e, 0x39, 0xa2, 0xf6, 0xef, 0x40, 0x42, 0x1e,
	0xbb, 0xcd, 0x77, 0x5a, 0xe8, 0x25, 0x9e, 0xf7, 0x7b, 0x1f, 0xf3, 0xbe, 0x27, 0xf0, 0x65, 0xe4,
	0xa7, 0xe7, 0xc4, 0x55, 0x4c, 0xf2, 0x75, 0xd8, 0xa1, 0xdd, 0x61, 0x32, 0x92, 0x42, 0x89, 0x5d,
	0xfd, 0x1b, 0x8f, 0xb0, 0x5c, 0x8d, 0xb2, 0xcf, 0x60, 0xe3, 0x88, 0x54, 0x3b, 0x39, 0x8d, 0x3b,
	0x32, 0x8c, 0x54, 0x28, 0xb8, 0x47, 0x3f, 0x27, 0x14, 0x2b, 0x74, 0x00, 0xc4, 0x05, 0x27, 0xd9,
	0xe4, 0xe9, 0x37, 0x5f, 0xdb, 0x66, 0xc3, 0xdc, 0xae, 0x78, 0x03, 0x08, 0x7b, 0x0e, 0x9b, 0x93,
	0x35, 0xdb, 0x61, 0x97, 0x53, 0x80, 0x36, 0x2c, 0x46, 0x7e, 0xda, 0x13, 0x7e, 0xa0, 0x95, 0x57,
	0xbc, 0x6b, 0x12, 0x37, 0xa1, 0x12, 0x87, 0x5d, 0xee, 0xab, 0x44, 0x92, 0x3d, 0xa7, 0x79, 0x7d,
	0x80, 0xfd, 0x5e, 0x82, 0x47, 0x63, 0x86, 0xe3, 0x48, 0xf0, 0x98, 0xf0, 0x3d, 0x28, 0xab, 0x90,
	0xa4, 0x36, 0x58, 0xdd, 0x7b, 0xe0, 0x0e, 0x0a, 0x9d, 0x84, 0x24, 0x3d, 0xcd, 0xc6, 0x0f, 0x61,
	0x21, 0x56, 0xbe, 0x4a, 0x62, 0x6d, 0xbd, 0xba, 0xb7, 0x3e, 0x24, 0xd8, 0xd6, 0x2c, 0xaf, 0x10,
	0xc1, 0x06, 0x2c, 0x07, 0xbe, 0xa2, 0xb6, 0xf2, 0xa5, 0xa2, 0xc0, 0x2e, 0x35, 0xcc, 0xed, 0xb2,
	0x37, 0x08, 0x61, 0x1d, 0x96, 0x32, 0xf2, 0x90, 0x07, 0xb1, 0x5d, 0xd6, 0xec, 0x1b, 0x3a, 0xd3,
	0x0e, 0xe3, 0x66, 0xa2, 0x84, 0x47, 0x9c, 0x2e, 0xec, 0xf9, 0x86, 0xb9, 0xbd, 0xe4, 0x0d, 0x42,
	0xf8, 0x11, 0x2c, 0x71, 0x7a, 0xa3, 0x32, 0xf7, 0xec, 0x85, 0x69, 0x7e, 0xdf, 0x88, 0x20, 0x83,
	0x95, 0xeb, 0xb3, 0xbe, 0x70, 0x51, 0x5f, 0x38, 0x84, 0xe1, 0x13, 0x58, 0x2d, 0x8a, 0xf9, 0x2d,
	0xa9, 0x57, 0x22, 0xb0, 0x97, 0xb4, 0xdd, 0xaa, 0xdb, 0x1a, 0x44, 0xbd, 0x61, 0x21, 0xdc, 0x01,
	0x4b, 0xe6, 0x15, 0xa2, 0xa0, 0xc9, 0xd3, 0xa7, 0xfe, 0x39, 0xd9, 0x15, 0x5d, 0xd6, 0x31, 0x3c,
	0x2b, 0x51, 0x12, 0x93, 0x3c, 0x3c, 0xf7, 0xc3, 0x9e, 0x0d, 0x5a, 0xa8, 0x0f, 0xb0, 0x7f, 0x4c,
	0xd8, 0xd8, 0x4f, 0xd2, 0xdb, 0xba, 0x26, 0x18, 0xeb, 0x9a, 0x00, 0xb7, 0x61, 0x4d, 0x53, 0x87,
	0xea, 0x55, 0x33, 0x08, 0x24, 0xc5, 0x79, 0x8d, 0x2a, 0xde, 0x28, 0x8c, 0x9f, 0xc2, 0xea, 0x8d,
	0x5b, 0x3a, 0x79, 0xa5, 0x69, 0xc9, 0x1b, 0x96, 0x1b, 0xcf, 0x4e, 0xf9, 0xff, 0x66, 0x67, 0x7e,
	0x72, 0x76, 0xb2, 0xd6, 0x9f, 0x1c, 0xfe, 0x3d, 0x5b, 0xff, 0x73, 0x78, 0x34, 0x66, 0xb7, 0xe8,
	0x7c, 0x07, 0xa0, 0xf0, 0xf7, 0x99, 0xec, 0x5d, 0xe7, 0xb5, 0x8f, 0xb0, 0x7d, 0x68, 0x8c, 0x0c,
	0x4d, 0x4b, 0x48, 0xe5, 0xf7, 0x8e, 0x43, 0x7e, 0x76, 0xc7, 0xda, 0xb0, 0x1f, 0xe0, 0xfd, 0xdb,
	0x6c, 0xdc, 0x33, 0xc0, 0x26, 0xbc, 0x3b, 0xe3, 0x86, 0x22, 0xd4, 0x4d, 0xa8, 0x44, 0x1a, 0xed,
	0x47, 0xda, 0x07, 0xd8, 0x2f, 0x26, 0xbc, 0x73, 0x44, 0xea, 0x39, 0xc9, 0xf0, 0xc7, 0xb0, 0xe3,
	0x67, 0x36, 0x74, 0x53, 0xde, 0xb5, 0x01, 0x6b, 0x30, 0x4f, 0xba, 0xab, 0xf3, 0xb6, 0xcb, 0x09,
	0x7c, 0x02, 0x0f, 0xe3, 0xdc, 0xab, 0x53, 0x3a, 0x11, 0x4f, 0xe9, 0x22, 0xee, 0x91, 0x52, 0x45,
	0xd3, 0x2d, 0x79, 0x93, 0x99, 0xcc, 0xd1, 0x2b, 0x70, 0x82, 0x2b, 0x79, 0x24, 0xec, 0xa5, 0x0e,
	0x77, 0x9a, 0xab, 0xf7, 0xcc, 0xa5, 0x04, 0xd4, 0x96, 0xd3, 0xff, 0x14, 0xfe, 0xdd, 0xe7, 0x0f,
	0xa1, 0xdc, 0x11, 0x01, 0xe9, 0x0c, 0x54, 0x3c, 0x7d, 0x66, 0xbb, 0xb0, 0x3e, 0x74, 0x67, 0x51,
	0x31, 0x1b, 0x16, 0xe3, 0xa4, 0xd3, 0xc9, 0x8c, 0x99, 0x3a, 0x5f, 0xd7, 0x24, 0xf3, 0xc0, 0x1e,
	0x77, 0xf2, 0x7e, 0x81, 0xef, 0xfc, 0x66, 0x82, 0x35, 0xba, 0x03, 0x70, 0x0d, 0x96, 0xb3, 0xef,
	0x33, 0x7e, 0xc6, 0xc5, 0x05, 0xb7, 0x0c, 0xb4, 0x60, 0x45, 0xef, 0xcb, 0x37, 0x51, 0x4f, 0x48,
	0x92, 0x96, 0x89, 0x36, 0xd4, 0x32, 0x64, 0x3f, 0x09, 0x7b, 0x01, 0xc9, 0x8f, 0xbf, 0x23, 0x3a,
	0x3b, 0x39, 0x6c, 0x9f, 0x58, 0x73, 0x58, 0x87, 0x8d, 0x8c, 0x73, 0x20, 0x0e, 0x24, 0xf9, 0x4a,
	0x0c, 0xf0, 0x4a, 0x58, 0x03, 0x6b, 0x50, 0xeb, 0x7b, 0xf2, 0xa5, 0x55, 0xc6, 0x0d, 0xc0, 0x61,
	0x0d, 0x8d, 0xcf, 0xef, 0x1c, 0x03, 0x8e, 0x3f, 0x35, 0xf8, 0x00, 0x56, 0xf3, 0x53, 0xdf, 0xbd,
	0x1b, 0xa8, 0x45, 0x3c, 0x08, 0x79, 0xd7, 0x32, 0x33, 0x8f, 0x73, 0xa8, 0xd9, 0x51, 0xe1, 0x6b,
	0xb2, 0xe6, 0x76, 0x5e, 0xc0, 0xea, 0xd0, 0xce, 0xc2, 0x2a, 0x40, 0x7e, 0x3a, 0xf0, 0x65, 0x90,
	0x07, 0x59, 0xd0, 0x32, 0x8d, 0x94, 0xb0, 0x4c, 0x44, 0xa8, 0xe6, 0x48, 0x33, 0x8a, 0x7a, 0xd4,
	0xf2, 0x53, 0x6b, 0x0e, 0xd7, 0x61, 0x2d, 0xc7, 0x8e, 0x84, 0xe8, 0xe6, 0x60, 0x69, 0xef, 0x8f,
	0x12, 0xd4, 0x9a, 0x3c, 0x2d, 0xec, 0xb7, 0xa4, 0xc8, 0xea, 0x15, 0xf2, 0x2e, 0x7a, 0xf0, 0x70,
	0x64, 0x46, 0x8b, 0x28, 0xb6, 0xdc, 0x59, 0xef, 0x7d, 0xdd, 0x76, 0xa7, 0xbc, 0xda, 0xcc, 0xc0,
	0x63, 0x58, 0x1b, 0x59, 0x6c, 0xb8, 0xe5, 0xce, 0x5a, 0xa1, 0x75, 0xdb, 0x9d, 0xb2, 0x09, 0x99,
	0x81, 0x3f, 0xc1, 0xe3, 0xa9, 0x5b, 0x04, 0x3f, 0x70, 0xef, 0xb6, 0xc3, 0xea, 0xcc, 0xbd, 0x75,
	0x15, 0x31, 0x03, 0x5f, 0x42, 0x6d, 0xd2, 0x08, 0xa3, 0xd6, 0x9e, 0x3d, 0xd9, 0xf5, 0x2d, 0x77,
	0xe6, 0x76, 0x30, 0xf0, 0x2b, 0x58, 0x1e, 0x98, 0x0e, 0x7c, 0xec, 0x4e, 0x9b, 0x95, 0x7a, 0xcd,
	0x9d, 0x30, 0x77, 0xcc, 0xd8, 0xff, 0xe2, 0xcf, 0x4b, 0xc7, 0x7c, 0x7b, 0xe9, 0x98, 0x7f, 0x5f,
	0x3a, 0xe6, 0xaf, 0x57, 0x8e, 0xf1, 0xf6, 0xca, 0x31, 0xfe, 0xba, 0x72, 0x8c, 0x17, 0xec, 0xf6,
	0x3f, 0x86, 0xa7, 0x0b, 0xfa, 0xf3, 0xc9, 0xbf, 0x01, 0x00, 0x00, 0xff, 0xff, 0x0f, 0x6f, 0xc2,
	0xe1, 0x45, 0x0a, 0x00, 0x00,
}

func (m *GetSubscriptionRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetSubscriptionRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSubscriptionRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.OwnerAnyID) > 0 {
		i -= len(m.OwnerAnyID)
		copy(dAtA[i:], m.OwnerAnyID)
		i = encodeVarintPaymentservice(dAtA, i, uint64(len(m.OwnerAnyID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetSubscriptionRequestSigned) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetSubscriptionRequestSigned) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSubscriptionRequestSigned) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Signature) > 0 {
		i -= len(m.Signature)
		copy(dAtA[i:], m.Signature)
		i = encodeVarintPaymentservice(dAtA, i, uint64(len(m.Signature)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Payload) > 0 {
		i -= len(m.Payload)
		copy(dAtA[i:], m.Payload)
		i = encodeVarintPaymentservice(dAtA, i, uint64(len(m.Payload)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetSubscriptionResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetSubscriptionResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSubscriptionResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.UserEmail) > 0 {
		i -= len(m.UserEmail)
		copy(dAtA[i:], m.UserEmail)
		i = encodeVarintPaymentservice(dAtA, i, uint64(len(m.UserEmail)))
		i--
		dAtA[i] = 0x52
	}
	if len(m.RequestedAnyName) > 0 {
		i -= len(m.RequestedAnyName)
		copy(dAtA[i:], m.RequestedAnyName)
		i = encodeVarintPaymentservice(dAtA, i, uint64(len(m.RequestedAnyName)))
		i--
		dAtA[i] = 0x4a
	}
	if m.PaymentMethod != 0 {
		i = encodeVarintPaymentservice(dAtA, i, uint64(m.PaymentMethod))
		i--
		dAtA[i] = 0x40
	}
	if m.NextTierEnds != 0 {
		i = encodeVarintPaymentservice(dAtA, i, uint64(m.NextTierEnds))
		i--
		dAtA[i] = 0x38
	}
	if m.NextTier != 0 {
		i = encodeVarintPaymentservice(dAtA, i, uint64(m.NextTier))
		i--
		dAtA[i] = 0x30
	}
	if m.IsAutoRenew {
		i--
		if m.IsAutoRenew {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x28
	}
	if m.DateEnds != 0 {
		i = encodeVarintPaymentservice(dAtA, i, uint64(m.DateEnds))
		i--
		dAtA[i] = 0x20
	}
	if m.DateStarted != 0 {
		i = encodeVarintPaymentservice(dAtA, i, uint64(m.DateStarted))
		i--
		dAtA[i] = 0x18
	}
	if m.Status != 0 {
		i = encodeVarintPaymentservice(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x10
	}
	if m.Tier != 0 {
		i = encodeVarintPaymentservice(dAtA, i, uint64(m.Tier))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *BuySubscriptionRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BuySubscriptionRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BuySubscriptionRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.RequestedAnyName) > 0 {
		i -= len(m.RequestedAnyName)
		copy(dAtA[i:], m.RequestedAnyName)
		i = encodeVarintPaymentservice(dAtA, i, uint64(len(m.RequestedAnyName)))
		i--
		dAtA[i] = 0x2a
	}
	if m.PaymentMethod != 0 {
		i = encodeVarintPaymentservice(dAtA, i, uint64(m.PaymentMethod))
		i--
		dAtA[i] = 0x20
	}
	if m.RequestedTier != 0 {
		i = encodeVarintPaymentservice(dAtA, i, uint64(m.RequestedTier))
		i--
		dAtA[i] = 0x18
	}
	if len(m.OwnerEthAddress) > 0 {
		i -= len(m.OwnerEthAddress)
		copy(dAtA[i:], m.OwnerEthAddress)
		i = encodeVarintPaymentservice(dAtA, i, uint64(len(m.OwnerEthAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.OwnerAnyId) > 0 {
		i -= len(m.OwnerAnyId)
		copy(dAtA[i:], m.OwnerAnyId)
		i = encodeVarintPaymentservice(dAtA, i, uint64(len(m.OwnerAnyId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *BuySubscriptionRequestSigned) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BuySubscriptionRequestSigned) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BuySubscriptionRequestSigned) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Signature) > 0 {
		i -= len(m.Signature)
		copy(dAtA[i:], m.Signature)
		i = encodeVarintPaymentservice(dAtA, i, uint64(len(m.Signature)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Payload) > 0 {
		i -= len(m.Payload)
		copy(dAtA[i:], m.Payload)
		i = encodeVarintPaymentservice(dAtA, i, uint64(len(m.Payload)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *BuySubscriptionResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BuySubscriptionResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BuySubscriptionResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PaymentUrl) > 0 {
		i -= len(m.PaymentUrl)
		copy(dAtA[i:], m.PaymentUrl)
		i = encodeVarintPaymentservice(dAtA, i, uint64(len(m.PaymentUrl)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetSubscriptionPortalLinkRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetSubscriptionPortalLinkRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSubscriptionPortalLinkRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.OwnerAnyId) > 0 {
		i -= len(m.OwnerAnyId)
		copy(dAtA[i:], m.OwnerAnyId)
		i = encodeVarintPaymentservice(dAtA, i, uint64(len(m.OwnerAnyId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetSubscriptionPortalLinkRequestSigned) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetSubscriptionPortalLinkRequestSigned) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSubscriptionPortalLinkRequestSigned) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Signature) > 0 {
		i -= len(m.Signature)
		copy(dAtA[i:], m.Signature)
		i = encodeVarintPaymentservice(dAtA, i, uint64(len(m.Signature)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Payload) > 0 {
		i -= len(m.Payload)
		copy(dAtA[i:], m.Payload)
		i = encodeVarintPaymentservice(dAtA, i, uint64(len(m.Payload)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetSubscriptionPortalLinkResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetSubscriptionPortalLinkResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSubscriptionPortalLinkResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PortalUrl) > 0 {
		i -= len(m.PortalUrl)
		copy(dAtA[i:], m.PortalUrl)
		i = encodeVarintPaymentservice(dAtA, i, uint64(len(m.PortalUrl)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetVerificationEmailRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetVerificationEmailRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetVerificationEmailRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.SubscribeToNewsletter {
		i--
		if m.SubscribeToNewsletter {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if len(m.Email) > 0 {
		i -= len(m.Email)
		copy(dAtA[i:], m.Email)
		i = encodeVarintPaymentservice(dAtA, i, uint64(len(m.Email)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.OwnerAnyId) > 0 {
		i -= len(m.OwnerAnyId)
		copy(dAtA[i:], m.OwnerAnyId)
		i = encodeVarintPaymentservice(dAtA, i, uint64(len(m.OwnerAnyId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetVerificationEmailResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetVerificationEmailResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetVerificationEmailResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *GetVerificationEmailRequestSigned) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetVerificationEmailRequestSigned) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetVerificationEmailRequestSigned) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Signature) > 0 {
		i -= len(m.Signature)
		copy(dAtA[i:], m.Signature)
		i = encodeVarintPaymentservice(dAtA, i, uint64(len(m.Signature)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Payload) > 0 {
		i -= len(m.Payload)
		copy(dAtA[i:], m.Payload)
		i = encodeVarintPaymentservice(dAtA, i, uint64(len(m.Payload)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *VerifyEmailRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VerifyEmailRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VerifyEmailRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Code) > 0 {
		i -= len(m.Code)
		copy(dAtA[i:], m.Code)
		i = encodeVarintPaymentservice(dAtA, i, uint64(len(m.Code)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.OwnerEthAddress) > 0 {
		i -= len(m.OwnerEthAddress)
		copy(dAtA[i:], m.OwnerEthAddress)
		i = encodeVarintPaymentservice(dAtA, i, uint64(len(m.OwnerEthAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.OwnerAnyId) > 0 {
		i -= len(m.OwnerAnyId)
		copy(dAtA[i:], m.OwnerAnyId)
		i = encodeVarintPaymentservice(dAtA, i, uint64(len(m.OwnerAnyId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *VerifyEmailResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VerifyEmailResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VerifyEmailResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Success {
		i--
		if m.Success {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *VerifyEmailRequestSigned) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VerifyEmailRequestSigned) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VerifyEmailRequestSigned) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Signature) > 0 {
		i -= len(m.Signature)
		copy(dAtA[i:], m.Signature)
		i = encodeVarintPaymentservice(dAtA, i, uint64(len(m.Signature)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Payload) > 0 {
		i -= len(m.Payload)
		copy(dAtA[i:], m.Payload)
		i = encodeVarintPaymentservice(dAtA, i, uint64(len(m.Payload)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintPaymentservice(dAtA []byte, offset int, v uint64) int {
	offset -= sovPaymentservice(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *GetSubscriptionRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.OwnerAnyID)
	if l > 0 {
		n += 1 + l + sovPaymentservice(uint64(l))
	}
	return n
}

func (m *GetSubscriptionRequestSigned) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Payload)
	if l > 0 {
		n += 1 + l + sovPaymentservice(uint64(l))
	}
	l = len(m.Signature)
	if l > 0 {
		n += 1 + l + sovPaymentservice(uint64(l))
	}
	return n
}

func (m *GetSubscriptionResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Tier != 0 {
		n += 1 + sovPaymentservice(uint64(m.Tier))
	}
	if m.Status != 0 {
		n += 1 + sovPaymentservice(uint64(m.Status))
	}
	if m.DateStarted != 0 {
		n += 1 + sovPaymentservice(uint64(m.DateStarted))
	}
	if m.DateEnds != 0 {
		n += 1 + sovPaymentservice(uint64(m.DateEnds))
	}
	if m.IsAutoRenew {
		n += 2
	}
	if m.NextTier != 0 {
		n += 1 + sovPaymentservice(uint64(m.NextTier))
	}
	if m.NextTierEnds != 0 {
		n += 1 + sovPaymentservice(uint64(m.NextTierEnds))
	}
	if m.PaymentMethod != 0 {
		n += 1 + sovPaymentservice(uint64(m.PaymentMethod))
	}
	l = len(m.RequestedAnyName)
	if l > 0 {
		n += 1 + l + sovPaymentservice(uint64(l))
	}
	l = len(m.UserEmail)
	if l > 0 {
		n += 1 + l + sovPaymentservice(uint64(l))
	}
	return n
}

func (m *BuySubscriptionRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.OwnerAnyId)
	if l > 0 {
		n += 1 + l + sovPaymentservice(uint64(l))
	}
	l = len(m.OwnerEthAddress)
	if l > 0 {
		n += 1 + l + sovPaymentservice(uint64(l))
	}
	if m.RequestedTier != 0 {
		n += 1 + sovPaymentservice(uint64(m.RequestedTier))
	}
	if m.PaymentMethod != 0 {
		n += 1 + sovPaymentservice(uint64(m.PaymentMethod))
	}
	l = len(m.RequestedAnyName)
	if l > 0 {
		n += 1 + l + sovPaymentservice(uint64(l))
	}
	return n
}

func (m *BuySubscriptionRequestSigned) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Payload)
	if l > 0 {
		n += 1 + l + sovPaymentservice(uint64(l))
	}
	l = len(m.Signature)
	if l > 0 {
		n += 1 + l + sovPaymentservice(uint64(l))
	}
	return n
}

func (m *BuySubscriptionResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PaymentUrl)
	if l > 0 {
		n += 1 + l + sovPaymentservice(uint64(l))
	}
	return n
}

func (m *GetSubscriptionPortalLinkRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.OwnerAnyId)
	if l > 0 {
		n += 1 + l + sovPaymentservice(uint64(l))
	}
	return n
}

func (m *GetSubscriptionPortalLinkRequestSigned) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Payload)
	if l > 0 {
		n += 1 + l + sovPaymentservice(uint64(l))
	}
	l = len(m.Signature)
	if l > 0 {
		n += 1 + l + sovPaymentservice(uint64(l))
	}
	return n
}

func (m *GetSubscriptionPortalLinkResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PortalUrl)
	if l > 0 {
		n += 1 + l + sovPaymentservice(uint64(l))
	}
	return n
}

func (m *GetVerificationEmailRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.OwnerAnyId)
	if l > 0 {
		n += 1 + l + sovPaymentservice(uint64(l))
	}
	l = len(m.Email)
	if l > 0 {
		n += 1 + l + sovPaymentservice(uint64(l))
	}
	if m.SubscribeToNewsletter {
		n += 2
	}
	return n
}

func (m *GetVerificationEmailResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *GetVerificationEmailRequestSigned) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Payload)
	if l > 0 {
		n += 1 + l + sovPaymentservice(uint64(l))
	}
	l = len(m.Signature)
	if l > 0 {
		n += 1 + l + sovPaymentservice(uint64(l))
	}
	return n
}

func (m *VerifyEmailRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.OwnerAnyId)
	if l > 0 {
		n += 1 + l + sovPaymentservice(uint64(l))
	}
	l = len(m.OwnerEthAddress)
	if l > 0 {
		n += 1 + l + sovPaymentservice(uint64(l))
	}
	l = len(m.Code)
	if l > 0 {
		n += 1 + l + sovPaymentservice(uint64(l))
	}
	return n
}

func (m *VerifyEmailResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Success {
		n += 2
	}
	return n
}

func (m *VerifyEmailRequestSigned) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Payload)
	if l > 0 {
		n += 1 + l + sovPaymentservice(uint64(l))
	}
	l = len(m.Signature)
	if l > 0 {
		n += 1 + l + sovPaymentservice(uint64(l))
	}
	return n
}

func sovPaymentservice(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozPaymentservice(x uint64) (n int) {
	return sovPaymentservice(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *GetSubscriptionRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPaymentservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetSubscriptionRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetSubscriptionRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OwnerAnyID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPaymentservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPaymentservice
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPaymentservice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OwnerAnyID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPaymentservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPaymentservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetSubscriptionRequestSigned) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPaymentservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetSubscriptionRequestSigned: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetSubscriptionRequestSigned: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Payload", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPaymentservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPaymentservice
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthPaymentservice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Payload = append(m.Payload[:0], dAtA[iNdEx:postIndex]...)
			if m.Payload == nil {
				m.Payload = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signature", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPaymentservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPaymentservice
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthPaymentservice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signature = append(m.Signature[:0], dAtA[iNdEx:postIndex]...)
			if m.Signature == nil {
				m.Signature = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPaymentservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPaymentservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetSubscriptionResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPaymentservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetSubscriptionResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetSubscriptionResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tier", wireType)
			}
			m.Tier = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPaymentservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Tier |= SubscriptionTier(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPaymentservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= SubscriptionStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DateStarted", wireType)
			}
			m.DateStarted = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPaymentservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DateStarted |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DateEnds", wireType)
			}
			m.DateEnds = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPaymentservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DateEnds |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsAutoRenew", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPaymentservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsAutoRenew = bool(v != 0)
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NextTier", wireType)
			}
			m.NextTier = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPaymentservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NextTier |= SubscriptionTier(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NextTierEnds", wireType)
			}
			m.NextTierEnds = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPaymentservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NextTierEnds |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PaymentMethod", wireType)
			}
			m.PaymentMethod = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPaymentservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PaymentMethod |= PaymentMethod(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestedAnyName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPaymentservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPaymentservice
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPaymentservice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RequestedAnyName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserEmail", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPaymentservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPaymentservice
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPaymentservice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserEmail = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPaymentservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPaymentservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BuySubscriptionRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPaymentservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BuySubscriptionRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BuySubscriptionRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OwnerAnyId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPaymentservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPaymentservice
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPaymentservice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OwnerAnyId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OwnerEthAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPaymentservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPaymentservice
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPaymentservice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OwnerEthAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestedTier", wireType)
			}
			m.RequestedTier = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPaymentservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RequestedTier |= SubscriptionTier(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PaymentMethod", wireType)
			}
			m.PaymentMethod = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPaymentservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PaymentMethod |= PaymentMethod(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestedAnyName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPaymentservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPaymentservice
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPaymentservice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RequestedAnyName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPaymentservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPaymentservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BuySubscriptionRequestSigned) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPaymentservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BuySubscriptionRequestSigned: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BuySubscriptionRequestSigned: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Payload", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPaymentservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPaymentservice
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthPaymentservice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Payload = append(m.Payload[:0], dAtA[iNdEx:postIndex]...)
			if m.Payload == nil {
				m.Payload = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signature", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPaymentservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPaymentservice
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthPaymentservice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signature = append(m.Signature[:0], dAtA[iNdEx:postIndex]...)
			if m.Signature == nil {
				m.Signature = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPaymentservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPaymentservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BuySubscriptionResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPaymentservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BuySubscriptionResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BuySubscriptionResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PaymentUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPaymentservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPaymentservice
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPaymentservice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PaymentUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPaymentservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPaymentservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetSubscriptionPortalLinkRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPaymentservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetSubscriptionPortalLinkRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetSubscriptionPortalLinkRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OwnerAnyId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPaymentservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPaymentservice
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPaymentservice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OwnerAnyId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPaymentservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPaymentservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetSubscriptionPortalLinkRequestSigned) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPaymentservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetSubscriptionPortalLinkRequestSigned: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetSubscriptionPortalLinkRequestSigned: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Payload", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPaymentservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPaymentservice
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthPaymentservice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Payload = append(m.Payload[:0], dAtA[iNdEx:postIndex]...)
			if m.Payload == nil {
				m.Payload = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signature", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPaymentservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPaymentservice
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthPaymentservice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signature = append(m.Signature[:0], dAtA[iNdEx:postIndex]...)
			if m.Signature == nil {
				m.Signature = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPaymentservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPaymentservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetSubscriptionPortalLinkResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPaymentservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetSubscriptionPortalLinkResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetSubscriptionPortalLinkResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PortalUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPaymentservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPaymentservice
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPaymentservice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PortalUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPaymentservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPaymentservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetVerificationEmailRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPaymentservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetVerificationEmailRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetVerificationEmailRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OwnerAnyId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPaymentservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPaymentservice
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPaymentservice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OwnerAnyId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Email", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPaymentservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPaymentservice
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPaymentservice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Email = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubscribeToNewsletter", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPaymentservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SubscribeToNewsletter = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipPaymentservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPaymentservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetVerificationEmailResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPaymentservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetVerificationEmailResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetVerificationEmailResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipPaymentservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPaymentservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetVerificationEmailRequestSigned) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPaymentservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetVerificationEmailRequestSigned: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetVerificationEmailRequestSigned: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Payload", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPaymentservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPaymentservice
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthPaymentservice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Payload = append(m.Payload[:0], dAtA[iNdEx:postIndex]...)
			if m.Payload == nil {
				m.Payload = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signature", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPaymentservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPaymentservice
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthPaymentservice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signature = append(m.Signature[:0], dAtA[iNdEx:postIndex]...)
			if m.Signature == nil {
				m.Signature = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPaymentservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPaymentservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VerifyEmailRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPaymentservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VerifyEmailRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VerifyEmailRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OwnerAnyId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPaymentservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPaymentservice
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPaymentservice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OwnerAnyId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OwnerEthAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPaymentservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPaymentservice
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPaymentservice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OwnerEthAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPaymentservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPaymentservice
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPaymentservice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Code = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPaymentservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPaymentservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VerifyEmailResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPaymentservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VerifyEmailResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VerifyEmailResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Success", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPaymentservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Success = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipPaymentservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPaymentservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VerifyEmailRequestSigned) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPaymentservice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VerifyEmailRequestSigned: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VerifyEmailRequestSigned: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Payload", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPaymentservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPaymentservice
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthPaymentservice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Payload = append(m.Payload[:0], dAtA[iNdEx:postIndex]...)
			if m.Payload == nil {
				m.Payload = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signature", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPaymentservice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPaymentservice
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthPaymentservice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signature = append(m.Signature[:0], dAtA[iNdEx:postIndex]...)
			if m.Signature == nil {
				m.Signature = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPaymentservice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPaymentservice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPaymentservice(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPaymentservice
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPaymentservice
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPaymentservice
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthPaymentservice
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupPaymentservice
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthPaymentservice
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthPaymentservice        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPaymentservice          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupPaymentservice = fmt.Errorf("proto: unexpected end of group")
)
